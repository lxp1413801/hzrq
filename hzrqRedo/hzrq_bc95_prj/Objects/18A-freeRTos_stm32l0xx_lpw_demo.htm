<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\18A-freeRTos_stm32l0xx_lpw_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\18A-freeRTos_stm32l0xx_lpw_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Mar 20 17:04:49 2019
<BR><P>
<H3>Maximum Stack Usage =       1656 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vTheadCoapPsm(void*) &rArr; hzrq_comm_received_process &rArr; hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[55]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5b]">vPortExitCritical</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[da]">vAssertCalled</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[14]">DMA1_Channel1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DMA1_Channel1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC1_COMP_IRQHandler</a> from stm32l0xx_it.o(i.ADC1_COMP_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[14]">DMA1_Channel1_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[10]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[11]">EXTI2_3_IRQHandler</a> from stm32l0xx_it.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[12]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[22]">I2C2_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[1f]">I2C3_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[28]">LCD_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[18]">LPTIM1_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[27]">LPUSART1_IRQHandler</a> from stm32l0xx_it.o(i.LPUSART1_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[f]">RCC_CRS_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32l0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[23]">SPI1_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[24]">SPI2_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[2a]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l073xx.o(.text)
 <LI><a href="#[1e]">TIM21_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[20]">TIM22_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[1a]">TIM2_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[1b]">TIM3_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[1c]">TIM6_DAC_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[1d]">TIM7_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[13]">TSC_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[25]">USART1_IRQHandler</a> from stm32l0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[26]">USART2_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[19]">USART4_5_IRQHandler</a> from stm32l0xx_it.o(i.USART4_5_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[29]">USB_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[2e]">vTheadMain(void*)</a> from main.o(i._Z10vTheadMainPv) referenced from main.o(.constdata)
 <LI><a href="#[2d]">prvIdleTask(void*)</a> from tasks.o(i._Z11prvIdleTaskPv) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[2f]">vTheadEvent(void*)</a> from m_event.o(i._Z11vTheadEventPv) referenced from m_event.o(.constdata)
 <LI><a href="#[31]">vTheadCoapPsm(void*)</a> from nb_routines.o(i._Z13vTheadCoapPsmPv) referenced from nb_routines.o(.constdata)
 <LI><a href="#[30]">vTheadFlowPuls(void*)</a> from m_event.o(i._Z14vTheadFlowPulsPv) referenced from m_event.o(.constdata)
 <LI><a href="#[32]">vThreadDataSave(void*)</a> from data-protocol-ex.o(i._Z15vThreadDataSavePv) referenced from data-protocol-ex.o(.constdata)
 <LI><a href="#[2c]">prvTaskExitError()</a> from port.o(i._Z16prvTaskExitErrorv) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[33]">__main</a> from __main.o(!!!main) referenced from startup_stm32l073xx.o(.text)
 <LI><a href="#[9]">xPortPendSVHandler</a> from port_1.o(.text) referenced from startup_stm32l073xx.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[33]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[34]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[36]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2ad]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2ae]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2af]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2b0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2b1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2b2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2b3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2b4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2b5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2b6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[2b7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2b8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2b9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2ba]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2bb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2bc]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2bd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2be]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2bf]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2c0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2c1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[2c2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2c3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2c4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2c5]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2c6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[2c7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2c8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[2c9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[2ca]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2cb]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[35]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2cc]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[37]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2cd]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; m_thread_create_main() &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack(unsigned short, unsigned*) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2ce]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[57]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2cf]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_sysdata
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_nb_udp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_flow_puls
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_event
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_main()
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2d0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a7]"></a>prvPortStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[197]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler()
</UL>

<P><STRONG><a name="[199]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler()
</UL>

<P><STRONG><a name="[9]"></a>xPortPendSVHandler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortPendSVHandler &rArr; vTaskSwitchContext &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[2d1]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[2d2]"></a>m_read_reg_asm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l073xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue(QueueDefinition*, void*)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue(QueueDefinition*, const void*, long)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Bytes
</UL>

<P><STRONG><a name="[2d3]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack(unsigned short, unsigned*)
</UL>

<P><STRONG><a name="[47]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[46]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ebc_encrypt
</UL>

<P><STRONG><a name="[2d4]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_into_lpw
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_event_log
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_set(sysDataTime_t*)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_select_msi
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_config_enable_msi
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_disable_hsi()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_enable_hsi()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pins_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pins_deinit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sda_mode_out()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sda_mode_in()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspDeInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_usart1_se()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_lpusart1()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_start_to_end
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_new
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_init()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
</UL>

<P><STRONG><a name="[2d5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[22f]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_gas_log_format
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_event_log_format
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_hour_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_day_log(unsigned char*, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[2d6]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_push
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_get_tail
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_hight_flow_protect(unsigned)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_main()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ccid()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_mf_2_str(unsigned char*, uiFloat32_t*, unsigned char, unsigned char)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_release_ra
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_power_status
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_internal_vref_rtadc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battary_rtadc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_time_ms_2_s(unsigned)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_uint32_2_bcd(unsigned char*, unsigned short, unsigned)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond(unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_search_at_ts
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_stamp_to_system_dt
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__int32sec_to_hhmmss(unsigned, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_hour_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_day_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[2d8]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_hour()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_day()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_balance()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_overage_m()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_rssi()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ver()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_event_log
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_int_2_str_ex
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_search_at_ts
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_vol_log_hour_start_end
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_start_to_end
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_new
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_data_write_record
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_calc_total_volume()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_v()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_m()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_sysdata_save()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_week
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_hour_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_day_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_pkcs7padding(unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[2d9]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[4b]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[4a]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2dc]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_l2d_normalise</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_l2d</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>

<P><STRONG><a name="[2dd]"></a>_ll_sto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_ul2d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d &rArr; __aeabi_l2d_normalise
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2de]"></a>_ll_uto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2df]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rng_generation
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_mm()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_v_for_m()
</UL>

<P><STRONG><a name="[50]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[4f]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_mm()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_v_for_m()
</UL>

<P><STRONG><a name="[2e0]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
</UL>

<P><STRONG><a name="[2e1]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_mm()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_v_for_m()
</UL>

<P><STRONG><a name="[2e2]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rng_generation
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
</UL>

<P><STRONG><a name="[2e3]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3d]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2e4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e5]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2e6]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.ADC1_COMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC1_COMP_IRQHandler &rArr; HAL_COMP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>AES128_ECB_decrypt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m_aes_sf.o(i.AES128_ECB_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AES128_ECB_decrypt &rArr; InvCipher() &rArr; InvMixColumns()
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy(unsigned char*, unsigned char*)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ebc_decrypt
</UL>

<P><STRONG><a name="[60]"></a>AES128_ECB_encrypt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m_aes_sf.o(i.AES128_ECB_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AES128_ECB_encrypt &rArr; Cipher() &rArr; MixColumns()
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy(unsigned char*, unsigned char*)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion()
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ebc_encrypt
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_1_IRQHandler &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_exti0_1_irqhandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTI2_3_IRQHandler &rArr; m_gpio_exti2_3_irqhandler() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_exti2_3_irqhandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTI4_15_IRQHandler &rArr; m_gpio_exti4_15_irqhandler() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_exti4_15_irqhandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32l0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode()
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write_eeprom
</UL>

<P><STRONG><a name="[68]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_Calibration_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_init
</UL>

<P><STRONG><a name="[69]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[267]"></a>HAL_ADC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_polling_read
</UL>

<P><STRONG><a name="[268]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_polling_read
</UL>

<P><STRONG><a name="[5a]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>HAL_ADC_Init</STRONG> (Thumb, 552 bytes, Stack size 8 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; m_gpio_config_adcin11 &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_init
</UL>

<P><STRONG><a name="[6a]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_MspInit &rArr; m_gpio_config_adcin11 &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_adcin11
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[6f]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_polling_read
</UL>

<P><STRONG><a name="[70]"></a>HAL_ADC_Start</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable(ADC_HandleTypeDef*) &rArr; ADC_DelayMicroSecond(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable(ADC_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_start_conversion_first
</UL>

<P><STRONG><a name="[72]"></a>HAL_ADC_Stop</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Stop &rArr; ADC_ConversionStop(ADC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop(ADC_HandleTypeDef*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable(ADC_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_stop_conversion_first
</UL>

<P><STRONG><a name="[59]"></a>HAL_COMP_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32l0xx_hal_comp.o(i.HAL_COMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_COMP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>HAL_COMP_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_comp.o(i.HAL_COMP_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>

<P><STRONG><a name="[26f]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write_eeprom
</UL>

<P><STRONG><a name="[26e]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write_eeprom
</UL>

<P><STRONG><a name="[ad]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 266 bytes, Stack size 20 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_deinit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[13d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 472 bytes, Stack size 16 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_into_lpw
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pins_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pins_deinit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sda_mode_out()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sda_mode_in()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_lcd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_usart1_se()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_lpusart1()
</UL>

<P><STRONG><a name="[66]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop(ADC_HandleTypeDef*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable(ADC_HandleTypeDef*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable(ADC_HandleTypeDef*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WaitForSynchro
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LCD_UpdateDisplayRequest
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LCD_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[b6]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[77]"></a>HAL_InitTick</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, m_clock_config.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[7b]"></a>HAL_LCD_Init</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, stm32l0xx_hal_lcd.o(i.HAL_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_LCD_Init &rArr; HAL_LCD_MspInit &rArr; m_gpio_config_lcd &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WaitForSynchro
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_class_init()
</UL>

<P><STRONG><a name="[7c]"></a>HAL_LCD_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_lcd_hal.o(i.HAL_LCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_LCD_MspInit &rArr; m_gpio_config_lcd &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LCD_Init
</UL>

<P><STRONG><a name="[7f]"></a>HAL_LCD_UpdateDisplayRequest</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l0xx_hal_lcd.o(i.HAL_LCD_UpdateDisplayRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LCD_UpdateDisplayRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_refresh
</UL>

<P><STRONG><a name="[ae]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[98]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_exti4_15_enable
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_exti2_3_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[7a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_exti4_15_enable
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_exti2_3_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[227]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pre_pre_stop_processing
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pre_pre_sleep_processing()
</UL>

<P><STRONG><a name="[226]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pre_pre_stop_processing
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pre_pre_sleep_processing()
</UL>

<P><STRONG><a name="[96]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[29d]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[2a0]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[81]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 610 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspDeInit
</UL>

<P><STRONG><a name="[82]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_select_msi
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_enable_hsi()
</UL>

<P><STRONG><a name="[78]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[84]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[85]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[83]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[86]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1650 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_config_enable_msi
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_disable_hsi()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_enable_hsi()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspDeInit
</UL>

<P><STRONG><a name="[87]"></a>HAL_RNG_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32l0xx_hal_rng.o(i.HAL_RNG_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_RNG_DeInit &rArr; HAL_RNG_MspDeInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rng_init
</UL>

<P><STRONG><a name="[89]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32l0xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rng_generation
</UL>

<P><STRONG><a name="[8a]"></a>HAL_RNG_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l0xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rng_init
</UL>

<P><STRONG><a name="[88]"></a>HAL_RNG_MspDeInit</STRONG> (Thumb, 128 bytes, Stack size 104 bytes, m_rng.o(i.HAL_RNG_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_RNG_MspDeInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rng_reinit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rng_generation
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
</UL>

<P><STRONG><a name="[8b]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 88 bytes, Stack size 104 bytes, m_rng.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_RNG_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_RTCEx_DeactivateWakeUpTimer</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_DeactivateWakeUpTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTCEx_DeactivateWakeUpTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_disable_wakeup
</UL>

<P><STRONG><a name="[8e]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_enable_wakeup
</UL>

<P><STRONG><a name="[8f]"></a>HAL_RTCEx_WakeUpTimerEventCallback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, m_rtc.o(i.HAL_RTCEx_WakeUpTimerEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RTCEx_WakeUpTimerEventCallback &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_error_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>

<P><STRONG><a name="[92]"></a>HAL_RTCEx_WakeUpTimerIRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_WakeUpTimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RTCEx_WakeUpTimerIRQHandler &rArr; HAL_RTCEx_WakeUpTimerEventCallback &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HAL_RTC_Init</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_init
</UL>

<P><STRONG><a name="[94]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 116 bytes, Stack size 104 bytes, m_rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_error_handle()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_set(sysDataTime_t*)
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_set(sysDataTime_t*)
</UL>

<P><STRONG><a name="[9c]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[a4]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_UART_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_deinit
</UL>

<P><STRONG><a name="[a0]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_ErrorCallback &rArr; m_lpusart1_received_err_callback() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_usart1_se_received_err_callback()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_err_callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; m_lpusart1_received_err_callback() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT(UART_HandleTypeDef*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT(UART_HandleTypeDef*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT(UART_HandleTypeDef*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUSART1_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_5_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>HAL_UART_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, m_uart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[a9]"></a>HAL_UART_MspInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, m_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_MspInit &rArr; m_gpio_config_usart1_se() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_usart1_se()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_lpusart1()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[277]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, m_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_start
</UL>

<P><STRONG><a name="[18a]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_error_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>LCD_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32l0xx_hal_lcd.o(i.LCD_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LCD_Init
</UL>

<P><STRONG><a name="[27]"></a>LPUSART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.LPUSART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LPUSART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; m_lpusart1_received_err_callback() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_error_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[29e]"></a>PostSleepProcessing</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, m_pwr_mng.o(i.PostSleepProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PostSleepProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[9b]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[9a]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[95]"></a>RTC_EnterInitMode</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RTC_IRQHandler &rArr; HAL_RTCEx_WakeUpTimerIRQHandler &rArr; HAL_RTCEx_WakeUpTimerEventCallback &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>SHA256_Bytes</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, sha256.o(i.SHA256_Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Block(SHA256_State*, unsigned*)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
</UL>

<P><STRONG><a name="[b3]"></a>SHA256_Final</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, sha256.o(i.SHA256_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Bytes
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
</UL>

<P><STRONG><a name="[b4]"></a>SHA256_Init</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, sha256.o(i.SHA256_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SHA256_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Core_Init(SHA256_State*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SysTick_Handler &rArr; m_lpusart1_idle_time_hook &rArr; m_lpusart1_received_msg_post() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_usart1_se_idle_time_hook
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_idle_time_hook
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ac]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[aa]"></a>UART_SetConfig</STRONG> (Thumb, 924 bytes, Stack size 64 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ba]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[25]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; m_lpusart1_received_err_callback() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USART4_5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.USART4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART4_5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; m_lpusart1_received_err_callback() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>MixColumns()</STRONG> (Thumb, 288 bytes, Stack size 20 bytes, m_aes_sf.o(i._Z10MixColumnsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MixColumns()
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher()
</UL>

<P><STRONG><a name="[257]"></a>calc_crc_w(unsigned short, unsigned char, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, crc16_sf.o(i._Z10calc_crc_wtht))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_crc_w(unsigned short, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_sum
</UL>

<P><STRONG><a name="[c2]"></a>nb_get_csq()</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, m-nb-module.o(i._Z10nb_get_csqv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nb_get_csq() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match_ex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[c5]"></a>nb_get_snr()</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, m-nb-module.o(i._Z10nb_get_snrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nb_get_snr() &rArr; m_str_match_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[2e]"></a>vTheadMain(void*)</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, main.o(i._Z10vTheadMainPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = vTheadMain(void*) &rArr; pre_star_thread_main_00() &rArr; api_calc_all &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_for_start
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_device_ver
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_nb_udp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_flow_puls
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_event
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_enable_wakeup
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_disable_wakeup
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_refresh
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_on
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_off
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_01()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[247]"></a>AddRoundKey(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, m_aes_sf.o(i._Z11AddRoundKeyh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AddRoundKey(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher()
</UL>

<P><STRONG><a name="[24b]"></a>InvSubBytes()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m_aes_sf.o(i._Z11InvSubBytesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InvSubBytes()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher()
</UL>

<P><STRONG><a name="[d5]"></a>nb_get_mver()</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, m-nb-module.o(i._Z11nb_get_mverv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nb_get_mver() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match_ex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[dd]"></a>ui_disp_off()</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, ui.o(i._Z11ui_disp_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ui_disp_off() &rArr; ui_disp_off_reason() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_off_reason()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_main()
</UL>

<P><STRONG><a name="[e1]"></a>ui_mf_2_str(unsigned char*, uiFloat32_t*, unsigned char, unsigned char)</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, ui.o(i._Z11ui_mf_2_strPhP11uiFloat32_thh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ui_mf_2_str(unsigned char*, uiFloat32_t*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
</UL>

<P><STRONG><a name="[2f]"></a>vTheadEvent(void*)</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, m_event.o(i._Z11vTheadEventPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = vTheadEvent(void*) &rArr; event_key_down_process() &rArr; even_key_down_valve_ctrl() &rArr; api_calc_all &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_soft_wdg_clr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_shell_open
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_process_ex
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_all_data_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_start_waite_power_up
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_day_change
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set_globle_time_out_max()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_check_batteray()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_off()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_process_sec()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_unlock()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_alarm_process()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_ste_process()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_warning()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_event.o(.constdata)
</UL>
<P><STRONG><a name="[24a]"></a>InvShiftRows()</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, m_aes_sf.o(i._Z12InvShiftRowsv))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher()
</UL>

<P><STRONG><a name="[5e]"></a>KeyExpansion()</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, m_aes_sf.o(i._Z12KeyExpansionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeyExpansion()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
</UL>

<P><STRONG><a name="[b2]"></a>SHA256_Block(SHA256_State*, unsigned*)</STRONG> (Thumb, 1416 bytes, Stack size 376 bytes, sha256.o(i._Z12SHA256_BlockP12SHA256_StatePj))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Bytes
</UL>

<P><STRONG><a name="[253]"></a>__hal_fi_off(__OVERAGE_VM_STATE)</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, data-protocol-ex.o(i._Z12__hal_fi_off18__OVERAGE_VM_STATE))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
</UL>

<P><STRONG><a name="[f5]"></a>flow_process()</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, m_event.o(i._Z12flow_processv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flow_process() &rArr; m_flow_pulse_timer_table_push
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_flow_irq_re_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_flow_irq_disable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_pulse_timer_table_push
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadFlowPuls(void*)
</UL>

<P><STRONG><a name="[f2]"></a>flow_warning()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m_event.o(i._Z12flow_warningv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flow_warning() &rArr; buzzer_beap_ms(unsigned short) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_beap_ms(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[fa]"></a>iic_send_ack(signed char)</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, m_iic.o(i._Z12iic_send_acka))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iic_send_ack(signed char) &rArr; iic_sda_mode_out() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sda_mode_out()
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_received_byte_if_ack
</UL>

<P><STRONG><a name="[1ec]"></a>init_rtc_x_x()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i._Z12init_rtc_x_xv))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
</UL>

<P><STRONG><a name="[ff]"></a>InvMixColumns()</STRONG> (Thumb, 1206 bytes, Stack size 44 bytes, m_aes_sf.o(i._Z13InvMixColumnsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InvMixColumns()
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher()
</UL>

<P><STRONG><a name="[31]"></a>vTheadCoapPsm(void*)</STRONG> (Thumb, 494 bytes, Stack size 160 bytes, nb_routines.o(i._Z13vTheadCoapPsmPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = vTheadCoapPsm(void*) &rArr; hzrq_comm_received_process &rArr; hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_item_get_unread_num
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_delete_tail
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_received_extract_process
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_udp_cereg_coap
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_received_process
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_receive_buffer_clear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_cfun_off
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_fota_process
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_release_ra
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_enter_psm
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_deinit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_register_frame
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_process_disable_sleep_in_lwp()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_routines.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>__hzrq_crc_sum(unsigned char*, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hzrq-comm-protocol.o(i._Z14__hzrq_crc_sumPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hzrq_crc_sum(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_crc_append(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[f9]"></a>buzzer_beap_ms(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_event.o(i._Z14buzzer_beap_mst))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = buzzer_beap_ms(unsigned short) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_on
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_off
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process_menu_change()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_warning()
</UL>

<P><STRONG><a name="[117]"></a>hzrq_fi_report()</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, m_event.o(i._Z14hzrq_fi_reportv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = hzrq_fi_report() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dt_to_time_stamp
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_scanf_int16
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_change_minute()
</UL>

<P><STRONG><a name="[11c]"></a>m_flow_calc_mm()</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, flow-ex.o(i._Z14m_flow_calc_mmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = m_flow_calc_mm() &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_process_ex
</UL>

<P><STRONG><a name="[120]"></a>m_uint32_2_bcd(unsigned char*, unsigned short, unsigned)</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, m-nb-module.o(i._Z14m_uint32_2_bcdPhtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_uint32_2_bcd(unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_nuestatus()
</UL>

<P><STRONG><a name="[15a]"></a>nb_scanf_int32(unsigned char*, unsigned char, unsigned short*)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, m-nb-module.o(i._Z14nb_scanf_int32PhhPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nb_scanf_int32(unsigned char*, unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_nuestatus_cell()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_nuestatus()
</UL>

<P><STRONG><a name="[121]"></a>nb_time_ms_2_s(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m-nb-module.o(i._Z14nb_time_ms_2_sj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nb_time_ms_2_s(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[30]"></a>vTheadFlowPuls(void*)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, m_event.o(i._Z14vTheadFlowPulsPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vTheadFlowPuls(void*) &rArr; osSignalWait &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList(unsigned) &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_process()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_event.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>valve_ulock_fi()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_event.o(i._Z14valve_ulock_fiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = valve_ulock_fi() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_vavle_open_condition()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
</UL>

<P><STRONG><a name="[a5]"></a>UART_Receive_IT(UART_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_uart.o(i._Z15UART_Receive_ITP18UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Receive_IT(UART_HandleTypeDef*) &rArr; m_usart_se_received_irq_callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_usart_se_received_irq_callback()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_irq_callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[252]"></a>__hal_cal_price(bool*, int*, unsigned char*)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, data-protocol-ex.o(i._Z15__hal_cal_pricePbPiPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hal_cal_price(bool*, int*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
</UL>

<P><STRONG><a name="[12a]"></a>__hzrq_load_rtc(unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hzrq-comm-protocol.o(i._Z15__hzrq_load_rtcPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hzrq_load_rtc(unsigned char*) &rArr; m_rtc_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_register_frame
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_rtc(unsigned char*, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[12c]"></a>hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z15hzrq_ins_rw_apnPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[138]"></a>hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z15hzrq_ins_rw_keyPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[139]"></a>hzrq_ins_rw_rtc(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, hzrq-comm-protocol.o(i._Z15hzrq_ins_rw_rtcPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = hzrq_ins_rw_rtc(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_ins_exe_sync_rtc(unsigned char*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_rtc(unsigned char*, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[13c]"></a>iic_sda_mode_in()</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, m_iic.o(i._Z15iic_sda_mode_inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iic_sda_mode_in() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_waite_ack
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_received_byte
</UL>

<P><STRONG><a name="[13e]"></a>m_flow_calc_day()</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, flow-ex.o(i._Z15m_flow_calc_dayv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_flow_calc_day() &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_process_ex
</UL>

<P><STRONG><a name="[140]"></a>nb_extract_cgsn(unsigned char*, unsigned short, unsigned char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, m-nb-module.o(i._Z15nb_extract_cgsnPhtS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nb_extract_cgsn(unsigned char*, unsigned short, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[141]"></a>nb_extract_cimi(unsigned char*, unsigned short, unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m-nb-module.o(i._Z15nb_extract_cimiPhtS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nb_extract_cimi(unsigned char*, unsigned short, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[143]"></a>ui_disp_menu_id()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ui.o(i._Z15ui_disp_menu_idv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ui_disp_menu_id() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_main()
</UL>

<P><STRONG><a name="[145]"></a>ui_disp_menu_ir()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ui.o(i._Z15ui_disp_menu_irv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ui_disp_menu_ir() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[147]"></a>ui_disp_menu_qn()</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, ui.o(i._Z15ui_disp_menu_qnv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ui_disp_menu_qn() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[32]"></a>vThreadDataSave(void*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, data-protocol-ex.o(i._Z15vThreadDataSavePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vThreadDataSave(void*) &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_sysdata_save()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data-protocol-ex.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>SHA256_Core_Init(SHA256_State*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sha256.o(i._Z16SHA256_Core_InitP12SHA256_State))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
</UL>

<P><STRONG><a name="[a6]"></a>UART_Transmit_IT(UART_HandleTypeDef*)</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i._Z16UART_Transmit_ITP18UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[263]"></a>hzrq_ins_default(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hzrq-comm-protocol.o(i._Z16hzrq_ins_defaultPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hzrq_ins_default(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[14a]"></a>hzrq_ins_exe_end(unsigned char*, unsigned short)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hzrq-comm-protocol.o(i._Z16hzrq_ins_exe_endPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = hzrq_ins_exe_end(unsigned char*, unsigned short) &rArr; api_calc_all &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t32(unsigned char*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[14d]"></a>hzrq_ins_exe_pop(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, hzrq-comm-protocol.o(i._Z16hzrq_ins_exe_popPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = hzrq_ins_exe_pop(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; rf_send_fifo_get_tail &rArr; rf_send_fifo_format &rArr; qc_data_write_to_media &rArr; m_flash_write_eeprom &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_get_tail
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_hasmore_mid(unsigned char*, unsigned short, unsigned char, unsigned char)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_crc_append_send(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[151]"></a>hzrq_ins_rw_imei(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z16hzrq_ins_rw_imeiPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_imei(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[152]"></a>hzrq_ins_rw_rssi(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z16hzrq_ins_rw_rssiPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_rssi(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[13b]"></a>hzrq_load_rw_rtc(unsigned char*, unsigned short, unsigned char)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, hzrq-comm-protocol.o(i._Z16hzrq_load_rw_rtcPhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = hzrq_load_rw_rtc(unsigned char*, unsigned short, unsigned char) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rtc(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rtc(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[153]"></a>hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, hzrq-comm-protocol.o(i._Z16hzrq_load_rw_t32Phthtibb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_mac(unsigned char*, unsigned short)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t32(unsigned char*, unsigned)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_money(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_price(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[fb]"></a>iic_sda_mode_out()</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, m_iic.o(i._Z16iic_sda_mode_outv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iic_sda_mode_out() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_byte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_ack(signed char)
</UL>

<P><STRONG><a name="[156]"></a>m_flow_calc_hour()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, flow-ex.o(i._Z16m_flow_calc_hourv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_flow_calc_hour() &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_process_ex
</UL>

<P><STRONG><a name="[271]"></a>m_flow_data_init()</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, flow-ex.o(i._Z16m_flow_data_initv))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_all_data_init
</UL>

<P><STRONG><a name="[157]"></a>m_lcd_class_init()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m_lcd_hal.o(i._Z16m_lcd_class_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_lcd_class_init() &rArr; HAL_LCD_Init &rArr; HAL_LCD_MspInit &rArr; m_gpio_config_lcd &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_init
</UL>

<P><STRONG><a name="[158]"></a>nb_extract_nccid(unsigned char*, unsigned short, unsigned char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, m-nb-module.o(i._Z16nb_extract_nccidPhtS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nb_extract_nccid(unsigned char*, unsigned short, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[159]"></a>nb_get_nuestatus()</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, m-nb-module.o(i._Z16nb_get_nuestatusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nb_get_nuestatus() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match_ex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_scanf_int32(unsigned char*, unsigned char, unsigned short*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_uint32_2_bcd(unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[15b]"></a>ui_disp_menu_YMD()</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, ui.o(i._Z16ui_disp_menu_YMDv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ui_disp_menu_YMD() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[15d]"></a>ui_disp_menu_hms()</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, ui.o(i._Z16ui_disp_menu_hmsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ui_disp_menu_hms() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[15e]"></a>ui_disp_menu_ver()</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, ui.o(i._Z16ui_disp_menu_verv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ui_disp_menu_ver() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[24e]"></a>__hal_fi_off_redo(__OVERAGE_VM_STATE)</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, data-protocol-ex.o(i._Z17__hal_fi_off_redo18__OVERAGE_VM_STATE))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_calc_all_redo
</UL>

<P><STRONG><a name="[15f]"></a>__hzrq_crc_append(unsigned char*, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hzrq-comm-protocol.o(i._Z17__hzrq_crc_appendPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hzrq_crc_append(unsigned char*, unsigned short) &rArr; __hzrq_crc_sum(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_crc_sum(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_crc_append_send(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[161]"></a>__hzrq_crc_verify(unsigned char*, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, hzrq-comm-protocol.o(i._Z17__hzrq_crc_verifyPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hzrq_crc_verify(unsigned char*, unsigned short) &rArr; __hzrq_crc_sum(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_crc_sum(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[162]"></a>__int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ui.o(i._Z17__int32_2_mflot32iP11uiFloat32_ttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_math_pow
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
</UL>

<P><STRONG><a name="[ec]"></a>event_ste_process()</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, m_event.o(i._Z17event_ste_processv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = event_ste_process() &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_ste_irq_re_enable
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_ste_irq_disable
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[167]"></a>hzrq_ins_rw_iccid(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z17hzrq_ins_rw_iccidPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_iccid(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[168]"></a>hzrq_ins_rw_price(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, hzrq-comm-protocol.o(i._Z17hzrq_ins_rw_pricePhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = hzrq_ins_rw_price(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t32(unsigned char*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[201]"></a>ir_received_ready()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_event.o(i._Z17ir_received_readyv))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_connect_ir()
</UL>

<P><STRONG><a name="[169]"></a>ui_disp_menu_ccid()</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, ui.o(i._Z17ui_disp_menu_ccidv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ui_disp_menu_ccid() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[16a]"></a>ui_disp_menu_dlcs()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ui.o(i._Z17ui_disp_menu_dlcsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ui_disp_menu_dlcs() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[16b]"></a>ui_disp_menu_home()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ui.o(i._Z17ui_disp_menu_homev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ui_disp_menu_home() &rArr; __ui_disp_menu_home_main() &rArr; ui_disp_overage_m() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_vavle_off()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_vavle_on()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_send()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_conn()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_rec()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_end()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_main()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_pay_value()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[174]"></a>ui_disp_menu_imei()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ui.o(i._Z17ui_disp_menu_imeiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ui_disp_menu_imei() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[175]"></a>ui_disp_menu_rssi()</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, ui.o(i._Z17ui_disp_menu_rssiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ui_disp_menu_rssi() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_main()
</UL>

<P><STRONG><a name="[176]"></a>ui_disp_overage_m()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ui.o(i._Z17ui_disp_overage_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ui_disp_overage_m() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_main()
</UL>

<P><STRONG><a name="[178]"></a>ui_disp_overage_v()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ui.o(i._Z17ui_disp_overage_vv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ui_disp_overage_v() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_main()
</UL>

<P><STRONG><a name="[16c]"></a>ui_disp_pay_value()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ui.o(i._Z17ui_disp_pay_valuev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ui_disp_pay_value() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_home()
</UL>

<P><STRONG><a name="[148]"></a>__hal_sysdata_save()</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, data-protocol-ex.o(i._Z18__hal_sysdata_savev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __hal_sysdata_save() &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_write_to_media
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_read_from_media
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_calc_all_redo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vThreadDataSave(void*)
</UL>

<P><STRONG><a name="[17e]"></a>__hzrq_get_mac_key(unsigned char*, unsigned char*, unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 152 bytes, hzrq-comm-protocol.o(i._Z18__hzrq_get_mac_keyPhS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = __hzrq_get_mac_key(unsigned char*, unsigned char*, unsigned short) &rArr; m_ebc_encrypt &rArr; AES128_ECB_encrypt &rArr; Cipher() &rArr; MixColumns()
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ebc_encrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_pkcs7padding(unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_mac(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[181]"></a>hzrq_load_rw_valve(unsigned char*, unsigned short, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, hzrq-comm-protocol.o(i._Z18hzrq_load_rw_valvePhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = hzrq_load_rw_valve(unsigned char*, unsigned short, unsigned char) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[182]"></a>m_clock_enable_hsi()</STRONG> (Thumb, 98 bytes, Stack size 80 bytes, m_clock_config.o(i._Z18m_clock_enable_hsiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = m_clock_enable_hsi() &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_config_error_handler()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_set_system_clock_hsi
</UL>

<P><STRONG><a name="[97]"></a>m_rtc_error_handle()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_rtc.o(i._Z18m_rtc_error_handlev))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_error_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_set(sysDataTime_t*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[184]"></a>nb_coap_psm_enable()</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, m-nb-module.o(i._Z18nb_coap_psm_enablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nb_coap_psm_enable() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[185]"></a>nb_get_module_type()</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, m-nb-module.o(i._Z18nb_get_module_typev))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nb_get_module_type() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match_ex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[188]"></a>ui_disp_menu_price()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ui.o(i._Z18ui_disp_menu_pricev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ui_disp_menu_price() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[e0]"></a>ui_disp_off_reason()</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, ui.o(i._Z18ui_disp_off_reasonv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ui_disp_off_reason() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_cpy
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_off()
</UL>

<P><STRONG><a name="[a7]"></a>UART_EndTransmit_IT(UART_HandleTypeDef*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i._Z19UART_EndTransmit_ITP18UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT(UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>__hal_cal_overage_m()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, data-protocol-ex.o(i._Z19__hal_cal_overage_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hal_cal_overage_m() &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_calc_all_redo
</UL>

<P><STRONG><a name="[18c]"></a>__hal_cal_overage_v()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, data-protocol-ex.o(i._Z19__hal_cal_overage_vv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hal_cal_overage_v() &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_calc_all_redo
</UL>

<P><STRONG><a name="[18d]"></a>__hzrq_download_rtc(unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, hzrq-comm-protocol.o(i._Z19__hzrq_download_rtcPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __hzrq_download_rtc(unsigned char*) &rArr; system_dt_to_time_stamp &rArr; __YYMMDD_to_int32day(unsigned short, unsigned char, unsigned char) &rArr; is_leap_year &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dt_to_time_stamp
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[17f]"></a>__hzrq_pkcs7padding(unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, hzrq-comm-protocol.o(i._Z19__hzrq_pkcs7paddingPhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hzrq_pkcs7padding(unsigned char*, unsigned short, unsigned short) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_get_mac_key(unsigned char*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[14b]"></a>__hzrq_swap_get_t16(unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hzrq-comm-protocol.o(i._Z19__hzrq_swap_get_t16Ph))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_register(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_mac(unsigned char*, unsigned short)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_end(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[14c]"></a>__hzrq_swap_get_t32(unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hzrq-comm-protocol.o(i._Z19__hzrq_swap_get_t32Ph))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hzrq_swap_get_t32(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_money(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_price(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_end(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[12e]"></a>_hzrq_get_func_code(unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hzrq-comm-protocol.o(i._Z19_hzrq_get_func_codePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_fails_times(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_protoclo_ver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_module_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_money(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_mb_sever_inf(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cust_dev_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_settle_mode(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_random_code(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_voltage(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_percent(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_power_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_vendor_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_has(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_ecl_level(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_near_fcn(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_way(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cell_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_price(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_iccid(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rssi(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_imei(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rtc(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[ed]"></a>event_alarm_process()</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, m_event.o(i._Z19event_alarm_processv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = event_alarm_process() &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_alarm_irq_re_enable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_alarm_irq_disable
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set_globle_time_out_max()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[190]"></a>hzrq_ins_rw_cell_id(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z19hzrq_ins_rw_cell_idPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_cell_id(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[191]"></a>m_adc_error_handler()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_adc.o(i._Z19m_adc_error_handlerv))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_error_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_stop_conversion_first
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_start_conversion_first
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_init
</UL>

<P><STRONG><a name="[192]"></a>m_clock_disable_hsi()</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, m_clock_config.o(i._Z19m_clock_disable_hsiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = m_clock_disable_hsi() &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_config_error_handler()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_set_system_clock_msi
</UL>

<P><STRONG><a name="[26c]"></a>m_clock_disable_msi()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_clock_config.o(i._Z19m_clock_disable_msiv))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_set_system_clock_hsi
</UL>

<P><STRONG><a name="[193]"></a>record_save_gas_log(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, hzrq-data-record.o(i._Z19record_save_gas_logh))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = record_save_gas_log(unsigned char) &rArr; ex_data_write_record &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dt_to_time_stamp
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_data_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_api_save_hour_log
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_api_save_day_log
</UL>

<P><STRONG><a name="[196]"></a>xPortSysTickHandler()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i._Z19xPortSysTickHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortSysTickHandler() &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[19a]"></a>__YYMMDD_to_int32day(unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, time-stamp.o(i._Z20__YYMMDD_to_int32daythh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __YYMMDD_to_int32day(unsigned short, unsigned char, unsigned char) &rArr; is_leap_year &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dt_to_time_stamp
</UL>

<P><STRONG><a name="[1ab]"></a>__hal_cal_fi_holiday()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, data-protocol-ex.o(i._Z20__hal_cal_fi_holidayv))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_warning_off()
</UL>

<P><STRONG><a name="[29a]"></a>__hhmmss_to_int32sec(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, time-stamp.o(i._Z20__hhmmss_to_int32sechhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __hhmmss_to_int32sec(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dt_to_time_stamp
</UL>

<P><STRONG><a name="[132]"></a>__hzrq_swap_load_t16(unsigned char*, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hzrq-comm-protocol.o(i._Z20__hzrq_swap_load_t16Pht))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_register_frame
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_event_log_format
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_fails_times(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_protoclo_ver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_module_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_mb_sever_inf(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cust_dev_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_settle_mode(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_random_code(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_voltage(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_percent(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_total_vol(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_power_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_vendor_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_has(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_ecl_level(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_near_fcn(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_way(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cell_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_valve(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_iccid(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_rtc(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rssi(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_imei(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[154]"></a>__hzrq_swap_load_t32(unsigned char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hzrq-comm-protocol.o(i._Z20__hzrq_swap_load_t32Phj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hzrq_swap_load_t32(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_gas_log_format
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_hour_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_day_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cust_dev_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_total_vol(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
</UL>

<P><STRONG><a name="[19c]"></a>__int32sec_to_hhmmss(unsigned, unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, time-stamp.o(i._Z20__int32sec_to_hhmmssjPhS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __int32sec_to_hhmmss(unsigned, unsigned char*, unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_stamp_to_system_dt
</UL>

<P><STRONG><a name="[155]"></a>_hzrq_load_frame_mac(unsigned char*, unsigned short)</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, hzrq-comm-protocol.o(i._Z20_hzrq_load_frame_macPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = _hzrq_load_frame_mac(unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len_ex
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_get_mac_key(unsigned char*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_register_frame
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
</UL>

<P><STRONG><a name="[299]"></a>dt_format_bcd_to_hex(sysDataTime_t*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, time-stamp.o(i._Z20dt_format_bcd_to_hexP13sysDataTime_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dt_format_bcd_to_hex(sysDataTime_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dt_to_time_stamp
</UL>

<P><STRONG><a name="[29b]"></a>dt_format_hex_to_bcd(sysDataTime_t*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, time-stamp.o(i._Z20dt_format_hex_to_bcdP13sysDataTime_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dt_format_hex_to_bcd(sysDataTime_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_stamp_to_system_dt
</UL>

<P><STRONG><a name="[f3]"></a>event_process_unlock()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m_event.o(i._Z20event_process_unlockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = event_process_unlock() &rArr; vavle_on_from_app &rArr; vavle_on_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_on_from_app
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[1a0]"></a>event_rtc_change_day()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_event.o(i._Z20event_rtc_change_dayv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = event_rtc_change_day() &rArr; record_api_save_day_log &rArr; record_save_gas_log(unsigned char) &rArr; ex_data_write_record &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_api_save_day_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_date_time_x()
</UL>

<P><STRONG><a name="[1a2]"></a>hzrq_ins_rw_comm_way(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z20hzrq_ins_rw_comm_wayPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_comm_way(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1a3]"></a>hzrq_ins_rw_nb_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z20hzrq_ins_rw_nb_swverPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_nb_swver(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1a4]"></a>hzrq_ins_rw_near_fcn(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z20hzrq_ins_rw_near_fcnPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_near_fcn(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1a5]"></a>m_thread_create_main()</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, main.o(i._Z20m_thread_create_mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_thread_create_main() &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack(unsigned short, unsigned*) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_ex_eeprom_mutex_create()
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>ui_disp_menu_balance()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ui.o(i._Z20ui_disp_menu_balancev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ui_disp_menu_balance() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[1aa]"></a>__hal_cal_warning_off()</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, data-protocol-ex.o(i._Z21__hal_cal_warning_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hal_cal_warning_off()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_fi_holiday()
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_calc_all_redo
</UL>

<P><STRONG><a name="[150]"></a>_hzrq_crc_append_send(unsigned char*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, hzrq-comm-protocol.o(i._Z21_hzrq_crc_append_sendPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _hzrq_crc_append_send(unsigned char*, unsigned short) &rArr; __hzrq_crc_append(unsigned char*, unsigned short) &rArr; __hzrq_crc_sum(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_crc_append(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_register(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned char)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_pop(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1cf]"></a>_hzrq_load_device_sta(unsigned char*)</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, hzrq-comm-protocol.o(i._Z21_hzrq_load_device_staPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _hzrq_load_device_sta(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1ac]"></a>app_valve_on_msg_send()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_event.o(i._Z21app_valve_on_msg_sendv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_valve_on_msg_send() &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_on_from_app
</UL>

<P><STRONG><a name="[1ad]"></a>event_rtc_change_hour()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_event.o(i._Z21event_rtc_change_hourv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = event_rtc_change_hour() &rArr; record_api_save_hour_log &rArr; record_save_gas_log(unsigned char) &rArr; ex_data_write_record &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_api_save_hour_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_date_time_x()
</UL>

<P><STRONG><a name="[1af]"></a>event_rtc_date_time_x()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, m_event.o(i._Z21event_rtc_date_time_xv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = event_rtc_date_time_x() &rArr; event_rtc_change_minute() &rArr; event_no_network_process() &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_change_second()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_change_minute()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_change_month()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_change_hour()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_change_day()
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_process_sec()
</UL>

<P><STRONG><a name="[ea]"></a>event_rtc_process_sec()</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, m_event.o(i._Z21event_rtc_process_secv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = event_rtc_process_sec() &rArr; event_rtc_date_time_x() &rArr; event_rtc_change_minute() &rArr; event_no_network_process() &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_date_time_x()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[1b3]"></a>hzrq_ins_exe_register(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned char)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, hzrq-comm-protocol.o(i._Z21hzrq_ins_exe_registerPhtS_th))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = hzrq_ins_exe_register(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned char) &rArr; _hzrq_received_mac_verify(unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_get_tail
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_hasmore_mid(unsigned char*, unsigned short, unsigned char, unsigned char)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_ins_exe_sync_rtc(unsigned char*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_crc_append_send(unsigned char*, unsigned short)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1b4]"></a>hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, hzrq-comm-protocol.o(i._Z21hzrq_ins_rd_event_logPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; record_read_eventlog_start_to_end &rArr; record_read_eventlog_init() &rArr; ex_eeprom_init_part_desc_eventlog() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_start_to_end
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_download_rtc(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1b6]"></a>hzrq_ins_rw_app_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z21hzrq_ins_rw_app_swverPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_app_swver(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1b7]"></a>hzrq_ins_rw_device_id(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z21hzrq_ins_rw_device_idPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_device_id(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1b8]"></a>hzrq_ins_rw_ecl_level(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z21hzrq_ins_rw_ecl_levelPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_ecl_level(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1b9]"></a>hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, hzrq-comm-protocol.o(i._Z21hzrq_ins_rw_total_volPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_total_vol(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t32(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1bb]"></a>hzrq_ins_rw_valve_has(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z21hzrq_ins_rw_valve_hasPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_valve_has(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1bc]"></a>hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z21hzrq_ins_rw_valve_staPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_valve(unsigned char*, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1bd]"></a>hzrq_ins_rw_vendor_id(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z21hzrq_ins_rw_vendor_idPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_vendor_id(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1be]"></a>nb_get_nuestatus_cell()</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, m-nb-module.o(i._Z21nb_get_nuestatus_cellv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nb_get_nuestatus_cell() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match_ex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_scanf_int32(unsigned char*, unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[1bf]"></a>__hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 152 bytes, hzrq-comm-protocol.o(i._Z22__hzrq_get_encrypt_keyPhS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[13a]"></a>_hzrq_ins_exe_sync_rtc(unsigned char*)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, hzrq-comm-protocol.o(i._Z22_hzrq_ins_exe_sync_rtcPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _hzrq_ins_exe_sync_rtc(unsigned char*) &rArr; api_rtc_set &rArr; m_rtc_set(sysDataTime_t*) &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_rtc_set
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_week
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_register(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned char)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rtc(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[130]"></a>_hzrq_received_decrypt(unsigned char*, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, hzrq-comm-protocol.o(i._Z22_hzrq_received_decryptPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = _hzrq_received_decrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ebc_decrypt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_money(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_price(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_end(unsigned char*, unsigned short)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rtc(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1c3]"></a>app_valve_off_msg_send()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_event.o(i._Z22app_valve_off_msg_sendv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_valve_off_msg_send() &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app
</UL>

<P><STRONG><a name="[e9]"></a>event_key_down_process()</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, m_event.o(i._Z22event_key_down_processv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = event_key_down_process() &rArr; even_key_down_valve_ctrl() &rArr; api_calc_all &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_key0_irq_re_enable
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_key0_irq_disable
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_id_writed_in_dlcs_a
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process_menu_change()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set_globle_time_out_max()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_disable_sleep_in_lwp()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_connect_udp()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_valve_ctrl()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_connect_ir()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_super_pay()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_ulock_fi()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_beap_ms(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[1b2]"></a>event_rtc_change_month()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m_event.o(i._Z22event_rtc_change_monthv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = event_rtc_change_month() &rArr; hzrq_report_next_tm_recalc() &rArr; system_dt_to_time_stamp &rArr; __YYMMDD_to_int32day(unsigned short, unsigned char, unsigned char) &rArr; is_leap_year &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_report_next_tm_recalc()
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_date_time_x()
</UL>

<P><STRONG><a name="[1ce]"></a>hzrq_ins_rw_device_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z22hzrq_ins_rw_device_staPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_device_sta(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_device_sta(unsigned char*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1d0]"></a>hzrq_ins_rw_power_type(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z22hzrq_ins_rw_power_typePhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_power_type(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1d1]"></a>hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z22hzrq_ins_rw_refusepeekPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1d2]"></a>hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z22hzrq_ins_rw_sever_addrPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1ba]"></a>hzrq_load_rw_total_vol(unsigned char*, unsigned short, unsigned char)</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, hzrq-comm-protocol.o(i._Z22hzrq_load_rw_total_volPhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = hzrq_load_rw_total_vol(unsigned char*, unsigned short, unsigned char) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t32(unsigned char*, unsigned)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1d3]"></a>m_flow_no_flow_protect()</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, flow-ex.o(i._Z22m_flow_no_flow_protectv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = m_flow_no_flow_protect() &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_second
</UL>

<P><STRONG><a name="[af]"></a>m_gpio_config_lpusart1()</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, m_uart.o(i._Z22m_gpio_config_lpusart1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_gpio_config_lpusart1() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1d4]"></a>nb_coap_psm_close_erda()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m-nb-module.o(i._Z22nb_coap_psm_close_erdav))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nb_coap_psm_close_erda() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[1d9]"></a>ui_disp_buy_gas_prompt()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ui.o(i._Z22ui_disp_buy_gas_promptv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ui_disp_buy_gas_prompt() &rArr; m_lcd_disp_seg
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[1da]"></a>ui_disp_seg_shell_open()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ui.o(i._Z22ui_disp_seg_shell_openv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ui_disp_seg_shell_open() &rArr; m_lcd_disp_seg
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[1db]"></a>vavle_on_from_app_hook()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_event.o(i._Z22vavle_on_from_app_hookv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = vavle_on_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_on_from_app
</UL>

<P><STRONG><a name="[1dc]"></a>__hal_calc_total_volume()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, data-protocol-ex.o(i._Z23__hal_calc_total_volumev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hal_calc_total_volume() &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_calc_all_redo
</UL>

<P><STRONG><a name="[131]"></a>_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, hzrq-comm-protocol.o(i._Z23_hzrq_load_frame_headerPhtthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_register_frame
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_fails_times(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_protoclo_ver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_module_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_mb_sever_inf(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cust_dev_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_settle_mode(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_random_code(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_voltage(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_percent(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_total_vol(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_power_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_vendor_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_has(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_ecl_level(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_near_fcn(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_way(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cell_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_valve(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_iccid(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_rtc(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rssi(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_imei(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1c9]"></a>even_key_down_super_pay()</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, m_event.o(i._Z23even_key_down_super_payv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = even_key_down_super_pay() &rArr; vavle_on_from_app &rArr; vavle_on_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_id_writed_in_dlcs_a
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_on_from_app
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
</UL>

<P><STRONG><a name="[e6]"></a>even_send_msg_to_rf_off()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_event.o(i._Z23even_send_msg_to_rf_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = even_send_msg_to_rf_off() &rArr; even_send_msg_to_start_rf(__m_udpSendmsg_t*) &rArr; api_sysdata_save &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_start_rf(__m_udpSendmsg_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[1b1]"></a>event_rtc_change_minute()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_event.o(i._Z23event_rtc_change_minutev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = event_rtc_change_minute() &rArr; event_no_network_process() &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_no_network_process()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_fi_report()
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_date_time_x()
</UL>

<P><STRONG><a name="[1b0]"></a>event_rtc_change_second()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_event.o(i._Z23event_rtc_change_secondv))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_date_time_x()
</UL>

<P><STRONG><a name="[1df]"></a>hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 282 bytes, Stack size 80 bytes, hzrq-comm-protocol.o(i._Z23hzrq_ins_rd_vol_log_dayPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_vol_log_day_start_end
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_download_rtc(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1e1]"></a>hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z23hzrq_ins_rw_account_staPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1e2]"></a>hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z23hzrq_ins_rw_balance_staPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1e3]"></a>hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, hzrq-comm-protocol.o(i._Z23hzrq_ins_rw_balence_volPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t32(unsigned char*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1e4]"></a>hzrq_ins_rw_bat_percent(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z23hzrq_ins_rw_bat_percentPhtS_tt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_bat_percent(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1e5]"></a>hzrq_ins_rw_bat_voltage(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z23hzrq_ins_rw_bat_voltagePhtS_tt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_bat_voltage(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1e6]"></a>hzrq_ins_rw_device_type(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z23hzrq_ins_rw_device_typePhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_device_type(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1e7]"></a>hzrq_ins_rw_random_code(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z23hzrq_ins_rw_random_codePhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_random_code(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1e8]"></a>hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, hzrq-comm-protocol.o(i._Z23hzrq_ins_rw_reverse_volPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t32(unsigned char*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1e9]"></a>hzrq_ins_rw_settle_mode(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z23hzrq_ins_rw_settle_modePhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_settle_mode(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[b0]"></a>m_gpio_config_usart1_se()</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, m_uart.o(i._Z23m_gpio_config_usart1_sev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_gpio_config_usart1_se() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[c6]"></a>pre_star_thread_main_00()</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(i._Z23pre_star_thread_main_00v))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = pre_star_thread_main_00() &rArr; api_calc_all &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_mutex_create
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_sysdata
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_all_on
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_all_off
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_into_lpw
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_set_system_clock_msi
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_on
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_off
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_verify
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc_x_x()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[c8]"></a>pre_star_thread_main_01()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i._Z23pre_star_thread_main_01v))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pre_star_thread_main_01() &rArr; m_gpio_config_ste &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_exti4_15_enable
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_exti2_3_enable
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_ste
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_key0_irq
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_flow_pin
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_alarm_dect
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_alarm
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_ain_leak_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[1fe]"></a>ui_disp_menu_totale_vol()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ui.o(i._Z23ui_disp_menu_totale_volv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ui_disp_menu_totale_vol() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_main()
</UL>

<P><STRONG><a name="[1ff]"></a>vavle_off_from_app_hook()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_event.o(i._Z23vavle_off_from_app_hookv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app
</UL>

<P><STRONG><a name="[24d]"></a>__hal_cal_get_flow_pulse()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, data-protocol-ex.o(i._Z24__hal_cal_get_flow_pulsev))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_calc_all_redo
</UL>

<P><STRONG><a name="[177]"></a>__ui_disp_int32_to_float(int, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ui.o(i._Z24__ui_disp_int32_to_floatih))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_dp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_mf_2_str(unsigned char*, uiFloat32_t*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_szrq_balance()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_szrq_ov_vol()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_current_vol()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_totale_vol()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_balance()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_price()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_pay_value()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_overage_v()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_overage_m()
</UL>

<P><STRONG><a name="[16d]"></a>__ui_disp_menu_home_main()</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ui.o(i._Z24__ui_disp_menu_home_mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __ui_disp_menu_home_main() &rArr; ui_disp_overage_m() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_totale_vol()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_overage_v()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_overage_m()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_rssi()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_id()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_off()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_home()
</UL>

<P><STRONG><a name="[135]"></a>_hzrq_load_frame_encrypt(unsigned char*, unsigned short)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, hzrq-comm-protocol.o(i._Z24_hzrq_load_frame_encryptPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_ebc_encrypt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_pkcs7padding(unsigned char*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_total_vol(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_valve(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_rtc(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1c7]"></a>even_key_down_connect_ir()</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, m_event.o(i._Z24even_key_down_connect_irv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = even_key_down_connect_ir()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_id_writed_in_dlcs_a
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_received_ready()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
</UL>

<P><STRONG><a name="[1c6]"></a>even_key_down_valve_ctrl()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, m_event.o(i._Z24even_key_down_valve_ctrlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = even_key_down_valve_ctrl() &rArr; api_calc_all &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_clear_sysdata_to_dcls_b
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_all_data_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_id_writed_in_dlcs_a
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_on_from_app
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
</UL>

<P><STRONG><a name="[1de]"></a>event_no_network_process()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, m_event.o(i._Z24event_no_network_processv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = event_no_network_process() &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_change_minute()
</UL>

<P><STRONG><a name="[203]"></a>ex_eeprom_init_chip_desc()</STRONG> (Thumb, 72 bytes, Stack size 80 bytes, hzrq-data-record.o(i._Z24ex_eeprom_init_chip_descv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ex_eeprom_init_chip_desc() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_verify
</UL>

<P><STRONG><a name="[206]"></a>hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, hzrq-comm-protocol.o(i._Z24hzrq_ins_rd_vol_log_hourPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_vol_log_hour_start_end
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_download_rtc(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[208]"></a>hzrq_ins_rw_cust_dev_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z24hzrq_ins_rw_cust_dev_staPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_cust_dev_sta(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t32(unsigned char*, unsigned)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[209]"></a>hzrq_ins_rw_mb_sever_inf(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z24hzrq_ins_rw_mb_sever_infPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_mb_sever_inf(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[20a]"></a>hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z24hzrq_ins_rw_onconn_tmoutPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[20b]"></a>hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z24hzrq_ins_rw_onflow_tmoutPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[20c]"></a>hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z24hzrq_ins_rw_report_paramPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[20d]"></a>nb_coap_clear_freq_point()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m-nb-module.o(i._Z24nb_coap_clear_freq_pointv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nb_coap_clear_freq_point() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[20e]"></a>record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned)</STRONG> (Thumb, 240 bytes, Stack size 96 bytes, hzrq-data-record.o(i._Z24record_read_start_to_endhPhtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned) &rArr; record_search_at_ts &rArr; ex_data_get_part_inf &rArr; ex_eeprom_read &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_gas_log_format
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_search_at_ts
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_data_get_part_inf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_vol_log_hour_start_end
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_vol_log_day_start_end
</UL>

<P><STRONG><a name="[212]"></a>ui_disp_menu_current_vol()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ui.o(i._Z24ui_disp_menu_current_volv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ui_disp_menu_current_vol() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[213]"></a>ui_disp_menu_szrq_ov_vol()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ui.o(i._Z24ui_disp_menu_szrq_ov_volv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ui_disp_menu_szrq_ov_vol() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[214]"></a>ui_disp_seg_valve_status()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ui.o(i._Z24ui_disp_seg_valve_statusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ui_disp_seg_valve_status() &rArr; m_lcd_disp_seg
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[215]"></a>__hal_cal_overage_v_for_m()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, data-protocol-ex.o(i._Z25__hal_cal_overage_v_for_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __hal_cal_overage_v_for_m() &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_calc_all_redo
</UL>

<P><STRONG><a name="[133]"></a>__hzrq_load_frame_mod_len(unsigned char*, unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, hzrq-comm-protocol.o(i._Z25__hzrq_load_frame_mod_lenPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __hzrq_load_frame_mod_len(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_register_frame
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_fails_times(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_protoclo_ver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_module_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_mb_sever_inf(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cust_dev_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_settle_mode(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_random_code(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_voltage(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_percent(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_total_vol(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_power_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_vendor_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_has(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_ecl_level(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_near_fcn(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_way(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_mac(unsigned char*, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cell_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_valve(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_iccid(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_rtc(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rssi(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_imei(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[12d]"></a>_hzrq_received_crc_verify(unsigned char*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hzrq-comm-protocol.o(i._Z25_hzrq_received_crc_verifyPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _hzrq_received_crc_verify(unsigned char*, unsigned short) &rArr; __hzrq_crc_verify(unsigned char*, unsigned short) &rArr; __hzrq_crc_sum(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_crc_verify(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_fails_times(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_protoclo_ver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_module_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_money(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_mb_sever_inf(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cust_dev_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_settle_mode(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_random_code(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_voltage(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_percent(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_power_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_vendor_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_has(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_ecl_level(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_register(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned char)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_near_fcn(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_way(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cell_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_price(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_iccid(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rssi(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_imei(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_end(unsigned char*, unsigned short)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rtc(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[12f]"></a>_hzrq_received_mac_verify(unsigned char*, unsigned short)</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, hzrq-comm-protocol.o(i._Z25_hzrq_received_mac_verifyPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = _hzrq_received_mac_verify(unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_cmp_len
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_get_mac_key(unsigned char*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_money(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_register(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_price(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_end(unsigned char*, unsigned short)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rtc(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1c8]"></a>even_key_down_connect_udp()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, m_event.o(i._Z25even_key_down_connect_udpv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = even_key_down_connect_udp() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_id_writed_in_dlcs_a
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
</UL>

<P><STRONG><a name="[1dd]"></a>even_send_msg_to_start_rf(__m_udpSendmsg_t*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_event.o(i._Z25even_send_msg_to_start_rfP16__m_udpSendmsg_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = even_send_msg_to_start_rf(__m_udpSendmsg_t*) &rArr; api_sysdata_save &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_off()
</UL>

<P><STRONG><a name="[217]"></a>hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, hzrq-comm-protocol.o(i._Z25hzrq_ins_rd_event_log_newPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; record_read_eventlog_new &rArr; record_read_eventlog_init() &rArr; ex_eeprom_init_part_desc_eventlog() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_new
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[262]"></a>hzrq_ins_rd_vol_log_month(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hzrq-comm-protocol.o(i._Z25hzrq_ins_rd_vol_log_monthPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hzrq_ins_rd_vol_log_month(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[219]"></a>hzrq_ins_rw_balance_money(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, hzrq-comm-protocol.o(i._Z25hzrq_ins_rw_balance_moneyPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = hzrq_ins_rw_balance_money(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t32(unsigned char*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[21a]"></a>hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z25hzrq_ins_rw_overdraft_staPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[137]"></a>hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, hzrq-comm-protocol.o(i._Z25hzrq_load_rw_common_ReplyPhthttbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_mac(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_fails_times(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_protoclo_ver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_module_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_money(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_mb_sever_inf(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cust_dev_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_settle_mode(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_random_code(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_voltage(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_percent(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_power_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_vendor_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_has(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_ecl_level(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_near_fcn(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_way(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cell_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_price(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_iccid(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rssi(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_imei(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rtc(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[21b]"></a>m_flow_hight_flow_protect(unsigned)</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, flow-ex.o(i._Z25m_flow_hight_flow_protectj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = m_flow_hight_flow_protect(unsigned) &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_second
</UL>

<P><STRONG><a name="[62]"></a>m_gpio_exti0_1_irqhandler()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_gpio_config.o(i._Z25m_gpio_exti0_1_irqhandlerv))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>m_gpio_exti2_3_irqhandler()</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, m_gpio_config.o(i._Z25m_gpio_exti2_3_irqhandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_gpio_exti2_3_irqhandler() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[1a6]"></a>qc_ex_eeprom_mutex_create()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._Z25qc_ex_eeprom_mutex_createv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = qc_ex_eeprom_mutex_create() &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue(QueueDefinition*, const void*, long) &rArr; xTaskPriorityDisinherit &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_main()
</UL>

<P><STRONG><a name="[21f]"></a>record_read_eventlog_init()</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, hzrq-data-record.o(i._Z25record_read_eventlog_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = record_read_eventlog_init() &rArr; ex_eeprom_init_part_desc_eventlog() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_eventlog()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_start_to_end
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_new
</UL>

<P><STRONG><a name="[221]"></a>ui_disp_comm_rssi_segment(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ui.o(i._Z25ui_disp_comm_rssi_segmenth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ui_disp_comm_rssi_segment(unsigned char) &rArr; m_lcd_disp_seg
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[222]"></a>ui_disp_menu_szrq_balance()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ui.o(i._Z25ui_disp_menu_szrq_balancev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ui_disp_menu_szrq_balance() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[171]"></a>__ui_disp_menu_home_rf_end()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ui.o(i._Z26__ui_disp_menu_home_rf_endv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __ui_disp_menu_home_rf_end() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_home()
</UL>

<P><STRONG><a name="[170]"></a>__ui_disp_menu_home_rf_rec()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ui.o(i._Z26__ui_disp_menu_home_rf_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __ui_disp_menu_home_rf_rec() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_home()
</UL>

<P><STRONG><a name="[127]"></a>check_vavle_open_condition()</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, m_event.o(i._Z26check_vavle_open_conditionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_vavle_open_condition()
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_ulock_fi()
</UL>

<P><STRONG><a name="[1c5]"></a>event_disable_sleep_in_lwp()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_event.o(i._Z26event_disable_sleep_in_lwpv))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
</UL>

<P><STRONG><a name="[223]"></a>hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z26hzrq_ins_rw_hiflow_protectPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[224]"></a>hzrq_ins_rw_nb_module_type(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z26hzrq_ins_rw_nb_module_typePhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_nb_module_type(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[1cd]"></a>hzrq_report_next_tm_recalc()</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, m_event.o(i._Z26hzrq_report_next_tm_recalcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hzrq_report_next_tm_recalc() &rArr; system_dt_to_time_stamp &rArr; __YYMMDD_to_int32day(unsigned short, unsigned char, unsigned char) &rArr; is_leap_year &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dt_to_time_stamp
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_scanf_int16
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_change_month()
</UL>

<P><STRONG><a name="[272]"></a>m_flow_no_pulse_timer_init()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flow-ex.o(i._Z26m_flow_no_pulse_timer_initv))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_all_data_init
</UL>

<P><STRONG><a name="[64]"></a>m_gpio_exti4_15_irqhandler()</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, m_gpio_config.o(i._Z26m_gpio_exti4_15_irqhandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_gpio_exti4_15_irqhandler() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[225]"></a>m_pre_pre_sleep_processing()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m_pwr_mng.o(i._Z26m_pre_pre_sleep_processingv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = m_pre_pre_sleep_processing() &rArr; m_lpusart1_deinit &rArr; HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_into_lpw
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_deinit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[228]"></a>nb_send_process_release_ra(unsigned char*, unsigned short)</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, m-nb-module.o(i._Z26nb_send_process_release_raPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nb_send_process_release_ra(unsigned char*, unsigned short) &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_process_disable_sleep_in_lwp()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_send_str
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_send_byte_poll
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_int_2_str_ex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_release_ra
</UL>

<P><STRONG><a name="[22d]"></a>nb_udp_received_coap_nnmi1()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, m-nb-module.o(i._Z26nb_udp_received_coap_nnmi1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nb_udp_received_coap_nnmi1() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_received_process
</UL>

<P><STRONG><a name="[22e]"></a>__hzrq_load_pop_get_day_log(unsigned char*, unsigned short, unsigned)</STRONG> (Thumb, 294 bytes, Stack size 96 bytes, hzrq-comm-protocol.o(i._Z27__hzrq_load_pop_get_day_logPhtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hzrq_load_pop_get_day_log(unsigned char*, unsigned short, unsigned) &rArr; ex_data_get_part_inf &rArr; ex_eeprom_read &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_data_get_part_inf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t32(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
</UL>

<P><STRONG><a name="[16e]"></a>__ui_disp_menu_home_rf_conn()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ui.o(i._Z27__ui_disp_menu_home_rf_connv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __ui_disp_menu_home_rf_conn() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_home()
</UL>

<P><STRONG><a name="[16f]"></a>__ui_disp_menu_home_rf_send()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ui.o(i._Z27__ui_disp_menu_home_rf_sendv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __ui_disp_menu_home_rf_send() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_home()
</UL>

<P><STRONG><a name="[136]"></a>_hzrq_load_frame_crc_append(unsigned char*, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, hzrq-comm-protocol.o(i._Z27_hzrq_load_frame_crc_appendPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _hzrq_load_frame_crc_append(unsigned char*, unsigned short) &rArr; __hzrq_crc_append(unsigned char*, unsigned short) &rArr; __hzrq_crc_sum(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_crc_append(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_register_frame
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_fails_times(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_protoclo_ver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_module_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_mb_sever_inf(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cust_dev_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_settle_mode(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_random_code(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_voltage(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_percent(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_total_vol(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_power_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_vendor_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_has(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_ecl_level(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_near_fcn(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_way(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cell_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_valve(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_iccid(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_rtc(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rssi(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_imei(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[230]"></a>nb_coap_psm_reselect_enable()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, m-nb-module.o(i._Z27nb_coap_psm_reselect_enablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nb_coap_psm_reselect_enable() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
</UL>

<P><STRONG><a name="[231]"></a>__hzrq_load_pop_get_hour_log(unsigned char*, unsigned short, unsigned)</STRONG> (Thumb, 290 bytes, Stack size 96 bytes, hzrq-comm-protocol.o(i._Z28__hzrq_load_pop_get_hour_logPhtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hzrq_load_pop_get_hour_log(unsigned char*, unsigned short, unsigned) &rArr; ex_data_get_part_inf &rArr; ex_eeprom_read &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_data_get_part_inf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t32(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
</UL>

<P><STRONG><a name="[173]"></a>__ui_disp_menu_home_vavle_on()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ui.o(i._Z28__ui_disp_menu_home_vavle_onv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __ui_disp_menu_home_vavle_on() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_home()
</UL>

<P><STRONG><a name="[e7]"></a>even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 280 bytes, m_event.o(i._Z28even_send_msg_to_rf_send_pophth))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_push
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_event_log
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_start_rf(__m_udpSendmsg_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_check_batteray()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_connect_udp()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app_hook()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_on_from_app_hook()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_alarm_process()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_fi_report()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[ee]"></a>event_process_check_batteray()</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, m_event.o(i._Z28event_process_check_batterayv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = event_process_check_batteray() &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_power_status
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_internal_vref_rtadc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battary_rtadc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_start_waite_power_up
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[238]"></a>hzrq_ins_rw_app_protoclo_ver(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z28hzrq_ins_rw_app_protoclo_verPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_app_protoclo_ver(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[239]"></a>hzrq_ins_rw_comm_fails_times(unsigned char*, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i._Z28hzrq_ins_rw_comm_fails_timesPhtS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hzrq_ins_rw_comm_fails_times(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool) &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_common_Reply(unsigned char*, unsigned short, unsigned char, unsigned short, unsigned short, bool, bool)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_crc_verify(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_get_func_code(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
</UL>

<P><STRONG><a name="[183]"></a>m_clock_config_error_handler()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_clock_config.o(i._Z28m_clock_config_error_handlerv))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_error_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_select_msi
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_config_enable_msi
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_disable_hsi()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_enable_hsi()
</UL>

<P><STRONG><a name="[23a]"></a>m_lpusart1_received_msg_post()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m_uart.o(i._Z28m_lpusart1_received_msg_postv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_lpusart1_received_msg_post() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_idle_time_hook
</UL>

<P><STRONG><a name="[23b]"></a>np_udp_received_extract_coap(unsigned char*, unsigned char*, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, m-nb-module.o(i._Z28np_udp_received_extract_coapPhS_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = np_udp_received_extract_coap(unsigned char*, unsigned char*, unsigned short) &rArr; my_scanf_int16
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_scanf_int16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match_ex
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_h2b
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_received_extract_process
</UL>

<P><STRONG><a name="[23d]"></a>ui_disp_comm_battery_segment()</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ui.o(i._Z28ui_disp_comm_battery_segmentv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ui_disp_comm_battery_segment() &rArr; m_lcd_disp_seg
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
</UL>

<P><STRONG><a name="[293]"></a>vApplicationMallocFailedHook()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._Z28vApplicationMallocFailedHookv))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[172]"></a>__ui_disp_menu_home_vavle_off()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ui.o(i._Z29__ui_disp_menu_home_vavle_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __ui_disp_menu_home_vavle_off() &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_home()
</UL>

<P><STRONG><a name="[f0]"></a>event_set_globle_time_out_max()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_event.o(i._Z29event_set_globle_time_out_maxv))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_alarm_process()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[270]"></a>m_flow_pulse_timer_table_init()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, flow-ex.o(i._Z29m_flow_pulse_timer_table_initv))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_all_data_init
</UL>

<P><STRONG><a name="[27d]"></a>m_usart1_se_received_msg_post()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m_uart.o(i._Z29m_usart1_se_received_msg_postv))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_usart1_se_idle_time_hook
</UL>

<P><STRONG><a name="[2a6]"></a>vApplicationStackOverflowHook(void*, char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._Z29vApplicationStackOverflowHookPvPc))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[105]"></a>nb_process_disable_sleep_in_lwp()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m-nb-module.o(i._Z31nb_process_disable_sleep_in_lwpv))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_enter_psm
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process_release_ra(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[a1]"></a>m_lpusart1_received_err_callback()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, m_uart.o(i._Z32m_lpusart1_received_err_callbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_lpusart1_received_err_callback() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[128]"></a>m_lpusart1_received_irq_callback()</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, m_uart.o(i._Z32m_lpusart1_received_irq_callbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = m_lpusart1_received_irq_callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_echo
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_idle_time_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[129]"></a>m_usart_se_received_irq_callback()</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, m_uart.o(i._Z32m_usart_se_received_irq_callbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = m_usart_se_received_irq_callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_usart1_se_idle_time_reset
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[14f]"></a>__hzrq_load_frame_mod_hasmore_mid(unsigned char*, unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hzrq-comm-protocol.o(i._Z33__hzrq_load_frame_mod_hasmore_midPhthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hzrq_load_frame_mod_hasmore_mid(unsigned char*, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_register(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned char)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_pop(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[134]"></a>__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hzrq-comm-protocol.o(i._Z33__hzrq_load_rw_fb_insert_retvaluePhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short) &rArr; __hzrq_load_frame_mod_len(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_get_t16(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_total_vol(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_valve(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_t32(unsigned char*, unsigned short, unsigned char, unsigned short, int, bool, bool)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_rw_rtc(unsigned char*, unsigned short, unsigned char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[244]"></a>ex_eeprom_init_part_desc_clog_day()</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, hzrq-data-record.o(i._Z33ex_eeprom_init_part_desc_clog_dayv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ex_eeprom_init_part_desc_clog_day() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_verify
</UL>

<P><STRONG><a name="[220]"></a>ex_eeprom_init_part_desc_eventlog()</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, hzrq-data-record.o(i._Z33ex_eeprom_init_part_desc_eventlogv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ex_eeprom_init_part_desc_eventlog() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_verify
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_event_log
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_start_to_end
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_new
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_init()
</UL>

<P><STRONG><a name="[a2]"></a>m_usart1_se_received_err_callback()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, m_uart.o(i._Z33m_usart1_se_received_err_callbackv))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[1cb]"></a>event_key_down_process_menu_change()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, m_event.o(i._Z34event_key_down_process_menu_changev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = event_key_down_process_menu_change() &rArr; buzzer_beap_ms(unsigned short) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_beap_ms(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
</UL>

<P><STRONG><a name="[245]"></a>ex_eeprom_init_part_desc_clog_hour()</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, hzrq-data-record.o(i._Z34ex_eeprom_init_part_desc_clog_hourv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ex_eeprom_init_part_desc_clog_hour() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_verify
</UL>

<P><STRONG><a name="[246]"></a>ex_eeprom_init_part_desc_clog_month()</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, hzrq-data-record.o(i._Z35ex_eeprom_init_part_desc_clog_monthv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ex_eeprom_init_part_desc_clog_month() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_verify
</UL>

<P><STRONG><a name="[c1]"></a>xtime(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_aes_sf.o(i._Z5xtimeh))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns()
</UL>

<P><STRONG><a name="[61]"></a>Cipher()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m_aes_sf.o(i._Z6Cipherv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Cipher() &rArr; MixColumns()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRows()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey(unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
</UL>

<P><STRONG><a name="[248]"></a>SubBytes()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m_aes_sf.o(i._Z8SubBytesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SubBytes()
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher()
</UL>

<P><STRONG><a name="[266]"></a>delay_us(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_iic.o(i._Z8delay_ust))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
</UL>

<P><STRONG><a name="[5d]"></a>BlockCopy(unsigned char*, unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_aes_sf.o(i._Z9BlockCopyPhS_))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
</UL>

<P><STRONG><a name="[5f]"></a>InvCipher()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m_aes_sf.o(i._Z9InvCipherv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InvCipher() &rArr; InvMixColumns()
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvShiftRows()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
</UL>

<P><STRONG><a name="[249]"></a>ShiftRows()</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, m_aes_sf.o(i._Z9ShiftRowsv))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher()
</UL>

<P><STRONG><a name="[24c]"></a>m_rtc_set(sysDataTime_t*)</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, m_rtc.o(i._Z9m_rtc_setP13sysDataTime_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_rtc_set(sysDataTime_t*) &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_error_handle()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_rtc_set
</UL>

<P><STRONG><a name="[c3]"></a>nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, m-nb-module.o(i._Z9nb_at_cmdPhS_S_tj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_deinit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_process_disable_sleep_in_lwp()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_send_str
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_time_ms_2_s(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_udp_cereg_coap
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_receive_buffer_clear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_cfun_off
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_fota_process
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_enter_psm
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_reselect_enable()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_udp_received_coap_nnmi1()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process_release_ra(unsigned char*, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_clear_freq_point()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_close_erda()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_nuestatus_cell()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_module_type()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_enable()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_nuestatus()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_mver()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_csq()
</UL>

<P><STRONG><a name="[be]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ui.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_seg_valve_status()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_off_reason()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_home()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_dlcs()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_comm_received_process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[179]"></a>__hal_calc_all_redo</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, data-protocol-ex.o(i.__hal_calc_all_redo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __hal_calc_all_redo &rArr; __hal_cal_overage_v_for_m() &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_v_for_m()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_get_flow_pulse()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_calc_total_volume()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_warning_off()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_v()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_m()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_fi_off_redo(__OVERAGE_VM_STATE)
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_sysdata_save()
</UL>

<P><STRONG><a name="[24f]"></a>__hzrq_event_log_format</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, hzrq-comm-protocol.o(i.__hzrq_event_log_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __hzrq_event_log_format &rArr; time_stamp_to_system_dt &rArr; __int32day_to_YYMMDD &rArr; is_leap_year &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_stamp_to_system_dt
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_start_to_end
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_new
</UL>

<P><STRONG><a name="[211]"></a>__hzrq_gas_log_format</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hzrq-comm-protocol.o(i.__hzrq_gas_log_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hzrq_gas_log_format &rArr; __hzrq_swap_load_t32(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t32(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned)
</UL>

<P><STRONG><a name="[251]"></a>__int32day_to_YYMMDD</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, time-stamp.o(i.__int32day_to_YYMMDD))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __int32day_to_YYMMDD &rArr; is_leap_year &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_stamp_to_system_dt
</UL>

<P><STRONG><a name="[f1]"></a>api_calc_all</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, data-protocol-ex.o(i.api_calc_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = api_calc_all &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_v_for_m()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_get_flow_pulse()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_calc_total_volume()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_warning_off()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_v()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_m()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_price(bool*, int*, unsigned char*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_fi_off(__OVERAGE_VM_STATE)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_valve_ctrl()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_end(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1c1]"></a>api_rtc_set</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, m_rtc.o(i.api_rtc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = api_rtc_set &rArr; m_rtc_set(sysDataTime_t*) &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dt_to_time_stamp
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_set(sysDataTime_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_ins_exe_sync_rtc(unsigned char*)
</UL>

<P><STRONG><a name="[101]"></a>api_sysdata_save</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, data-protocol-ex.o(i.api_sysdata_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = api_sysdata_save &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_off
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_day_change
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_start_rf(__m_udpSendmsg_t*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_valve_ctrl()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_super_pay()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_money(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_price(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[d3]"></a>app_valve_off</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, valve_api.o(i.app_valve_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = app_valve_off &rArr; api_sysdata_save &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_vavle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_all_data_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_on
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[d1]"></a>app_valve_on</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, valve_api.o(i.app_valve_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = app_valve_on &rArr; app_valve_off &rArr; api_sysdata_save &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_off
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_vavle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_all_data_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_power_status
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battary_rtadc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[17a]"></a>crc_append</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, crc16_sf.o(i.crc_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = crc_append &rArr; crc_sum &rArr; calc_crc_w(unsigned short, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_push
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_format
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_delete_tail
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_event_log
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_data_write_record
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_month()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_hour()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_eventlog()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_day()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_init()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_chip_desc()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_sysdata_save()
</UL>

<P><STRONG><a name="[256]"></a>crc_sum</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, crc16_sf.o(i.crc_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc_sum &rArr; calc_crc_w(unsigned short, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc_w(unsigned short, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
</UL>

<P><STRONG><a name="[17d]"></a>crc_verify</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, crc16_sf.o(i.crc_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = crc_verify &rArr; crc_sum &rArr; calc_crc_w(unsigned short, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_push
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_get_tail
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_verify
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_event_log
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_search_at_ts
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_start_to_end
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_new
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_data_write_record
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_month()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_hour()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_eventlog()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_day()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_init()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_chip_desc()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_sysdata_save()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_hour_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_day_log(unsigned char*, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[1c0]"></a>day_of_week</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, time-stamp.o(i.day_of_week))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = day_of_week &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_ins_exe_sync_rtc(unsigned char*)
</UL>

<P><STRONG><a name="[29c]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[f4]"></a>event_process_day_change</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m_event.o(i.event_process_day_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = event_process_day_change &rArr; api_sysdata_save &rArr; osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[e5]"></a>event_start_waite_power_up</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_event.o(i.event_start_waite_power_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = event_start_waite_power_up &rArr; event_process_check_batteray() &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_check_batteray()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[210]"></a>ex_data_get_part_inf</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hzrq-data-record.o(i.ex_data_get_part_inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ex_data_get_part_inf &rArr; ex_eeprom_read &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_search_at_ts
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_hour_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_day_log(unsigned char*, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[194]"></a>ex_data_write_record</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, hzrq-data-record.o(i.ex_data_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ex_data_write_record &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_gas_log(unsigned char)
</UL>

<P><STRONG><a name="[205]"></a>ex_eeprom_read</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, hzrq-data-record.o(i.ex_eeprom_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ex_eeprom_read &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_byte
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_received_byte_if_ack
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pins_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pins_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_verify
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_event_log
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_search_at_ts
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_start_to_end
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_new
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_data_write_record
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_data_get_part_inf
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_month()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_hour()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_eventlog()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_day()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_init()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_chip_desc()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_hour_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_day_log(unsigned char*, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[1f5]"></a>ex_eeprom_verify</STRONG> (Thumb, 186 bytes, Stack size 80 bytes, hzrq-data-record.o(i.ex_eeprom_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ex_eeprom_verify &rArr; ex_eeprom_init_part_desc_clog_month() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_month()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_hour()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_eventlog()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_day()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_chip_desc()
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
</UL>

<P><STRONG><a name="[204]"></a>ex_eeprom_write</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, hzrq-data-record.o(i.ex_eeprom_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_byte
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pins_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pins_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_event_log
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_data_write_record
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_month()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_hour()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_eventlog()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_clog_day()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_init()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_chip_desc()
</UL>

<P><STRONG><a name="[1ca]"></a>fi_id_writed_in_dlcs_a</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ui.o(i.fi_id_writed_in_dlcs_a))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_connect_udp()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_valve_ctrl()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_connect_ir()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_super_pay()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
</UL>

<P><STRONG><a name="[236]"></a>get_battary_rtadc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, volt-dec.o(i.get_battary_rtadc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_battary_rtadc &rArr; m_gpio_config_ain_leak_disable &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_ain_leak_disable
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_ain_leak_enable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_stop_conversion_first
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_start_conversion_first
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_polling_read
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_on
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_check_batteray()
</UL>

<P><STRONG><a name="[235]"></a>get_internal_vref_rtadc</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, volt-dec.o(i.get_internal_vref_rtadc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_internal_vref_rtadc &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_stop_conversion_first
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_start_conversion_first
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_polling_read
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_check_batteray()
</UL>

<P><STRONG><a name="[237]"></a>get_power_status</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, volt-dec.o(i.get_power_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_power_status
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_on
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_check_batteray()
</UL>

<P><STRONG><a name="[19e]"></a>hmac_sha256</STRONG> (Thumb, 152 bytes, Stack size 272 bytes, sha256.o(i.hmac_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Bytes
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_mac(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[110]"></a>hzrq_comm_received_process</STRONG> (Thumb, 1178 bytes, Stack size 48 bytes, hzrq-comm-protocol.o(i.hzrq_comm_received_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = hzrq_comm_received_process &rArr; hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short) &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_fails_times(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_protoclo_ver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_module_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_hiflow_protect(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_overdraft_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_money(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_month(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_report_param(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onflow_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_onconn_tmout(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_mb_sever_inf(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cust_dev_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_settle_mode(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_reverse_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_random_code(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_voltage(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_bat_percent(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balence_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_balance_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_account_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_refusepeek(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_power_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_vendor_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_has(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_total_vol(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_ecl_level(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_register(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned char)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_near_fcn(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_comm_way(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cell_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_price(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_iccid(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rssi(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_imei(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_pop(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_end(unsigned char*, unsigned short)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_default(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_rtc(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[232]"></a>hzrq_load_pop_frame</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, hzrq-comm-protocol.o(i.hzrq_load_pop_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dt_to_time_stamp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_hour_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_day_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_device_sta(unsigned char*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t32(unsigned char*, unsigned)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rtc(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[108]"></a>hzrq_load_register_frame</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, hzrq-comm-protocol.o(i.hzrq_load_register_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = hzrq_load_register_frame &rArr; _hzrq_load_frame_mac(unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_crc_append(unsigned char*, unsigned short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_frame_mod_len(unsigned char*, unsigned short)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_header(unsigned char*, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_mac(unsigned char*, unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_swap_load_t16(unsigned char*, unsigned short)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rtc(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[25d]"></a>iic_pins_deinit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, m_iic.o(i.iic_pins_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iic_pins_deinit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>

<P><STRONG><a name="[258]"></a>iic_pins_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, m_iic.o(i.iic_pins_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iic_pins_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>

<P><STRONG><a name="[264]"></a>iic_received_byte</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, m_iic.o(i.iic_received_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iic_received_byte &rArr; iic_sda_mode_in() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sda_mode_in()
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_received_byte_if_ack
</UL>

<P><STRONG><a name="[25b]"></a>iic_received_byte_if_ack</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, m_iic.o(i.iic_received_byte_if_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = iic_received_byte_if_ack &rArr; iic_received_byte &rArr; iic_sda_mode_in() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_received_byte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_ack(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>

<P><STRONG><a name="[25a]"></a>iic_send_byte</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, m_iic.o(i.iic_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = iic_send_byte &rArr; iic_waite_ack &rArr; iic_stop &rArr; iic_sda_mode_out() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_waite_ack
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sda_mode_out()
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>

<P><STRONG><a name="[259]"></a>iic_start</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, m_iic.o(i.iic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iic_start &rArr; iic_sda_mode_out() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned short)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sda_mode_out()
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>

<P><STRONG><a name="[25c]"></a>iic_stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m_iic.o(i.iic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iic_stop &rArr; iic_sda_mode_out() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned short)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sda_mode_out()
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_waite_ack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
</UL>

<P><STRONG><a name="[265]"></a>iic_waite_ack</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, m_iic.o(i.iic_waite_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iic_waite_ack &rArr; iic_stop &rArr; iic_sda_mode_out() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sda_mode_in()
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_byte
</UL>

<P><STRONG><a name="[19b]"></a>is_leap_year</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, time-stamp.o(i.is_leap_year))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_leap_year &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__int32day_to_YYMMDD
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__YYMMDD_to_int32day(unsigned short, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e2]"></a>m_adc_init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, m_adc.o(i.m_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_adc_init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; m_gpio_config_adcin11 &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_error_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_check_batteray()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[260]"></a>m_adc_polling_read</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_adc.o(i.m_adc_polling_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_adc_polling_read &rArr; HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_internal_vref_rtadc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battary_rtadc
</UL>

<P><STRONG><a name="[25f]"></a>m_adc_start_conversion_first</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_adc.o(i.m_adc_start_conversion_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_adc_start_conversion_first &rArr; HAL_ADC_Start &rArr; ADC_Enable(ADC_HandleTypeDef*) &rArr; ADC_DelayMicroSecond(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_error_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_internal_vref_rtadc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battary_rtadc
</UL>

<P><STRONG><a name="[261]"></a>m_adc_stop_conversion_first</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_adc.o(i.m_adc_stop_conversion_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_adc_stop_conversion_first &rArr; HAL_ADC_Stop &rArr; ADC_ConversionStop(ADC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_error_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_internal_vref_rtadc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battary_rtadc
</UL>

<P><STRONG><a name="[114]"></a>m_buzzer_init</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, m_buzzer.o(i.m_buzzer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_buzzer_init &rArr; m_buzzer_off &rArr; m_gpio_write
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_off
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_beap_ms(unsigned short)
</UL>

<P><STRONG><a name="[116]"></a>m_buzzer_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_buzzer.o(i.m_buzzer_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_buzzer_off &rArr; m_gpio_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_beap_ms(unsigned short)
</UL>

<P><STRONG><a name="[115]"></a>m_buzzer_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_buzzer.o(i.m_buzzer_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_buzzer_on &rArr; m_gpio_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_beap_ms(unsigned short)
</UL>

<P><STRONG><a name="[269]"></a>m_clock_config_enable_msi</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, m_clock_config.o(i.m_clock_config_enable_msi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = m_clock_config_enable_msi &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_config_error_handler()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_set_system_clock_msi
</UL>

<P><STRONG><a name="[26a]"></a>m_clock_select_msi</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, m_clock_config.o(i.m_clock_select_msi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_clock_select_msi &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_config_error_handler()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_set_system_clock_msi
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_set_system_clock_hsi
</UL>

<P><STRONG><a name="[26b]"></a>m_clock_set_system_clock_hsi</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, m_clock_config.o(i.m_clock_set_system_clock_hsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = m_clock_set_system_clock_hsi &rArr; m_clock_enable_hsi() &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_select_msi
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_disable_msi()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_enable_hsi()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ef]"></a>m_clock_set_system_clock_msi</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, m_clock_config.o(i.m_clock_set_system_clock_msi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = m_clock_set_system_clock_msi &rArr; m_clock_config_enable_msi &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_select_msi
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_config_enable_msi
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_disable_hsi()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
</UL>

<P><STRONG><a name="[1c2]"></a>m_ebc_decrypt</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, m_aes_sf.o(i.m_ebc_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = m_ebc_decrypt &rArr; AES128_ECB_decrypt &rArr; InvCipher() &rArr; InvMixColumns()
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[180]"></a>m_ebc_encrypt</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, m_aes_sf.o(i.m_ebc_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = m_ebc_encrypt &rArr; AES128_ECB_encrypt &rArr; Cipher() &rArr; MixColumns()
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_get_mac_key(unsigned char*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[26d]"></a>m_flash_write_eeprom</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, m_flash.o(i.m_flash_write_eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_flash_write_eeprom &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_write_to_media
</UL>

<P><STRONG><a name="[e4]"></a>m_flow_all_data_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flow-ex.o(i.m_flow_all_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_flow_all_data_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_pulse_timer_table_init()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_no_pulse_timer_init()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_data_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_on
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_off
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_valve_ctrl()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[273]"></a>m_flow_calc_second</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, flow-ex.o(i.m_flow_calc_second))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = m_flow_calc_second &rArr; m_flow_hight_flow_protect(unsigned) &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_hight_flow_protect(unsigned)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_no_flow_protect()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_pulse_timer_table_push
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_process_ex
</UL>

<P><STRONG><a name="[eb]"></a>m_flow_process_ex</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, flow-ex.o(i.m_flow_process_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = m_flow_process_ex &rArr; m_flow_calc_second &rArr; m_flow_hight_flow_protect(unsigned) &rArr; vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_second
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_hour()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_day()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_mm()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[f7]"></a>m_flow_pulse_timer_table_push</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, flow-ex.o(i.m_flow_pulse_timer_table_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_flow_pulse_timer_table_push
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_second
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_process()
</UL>

<P><STRONG><a name="[6e]"></a>m_gpio_config_adcin11</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_config_adcin11))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_gpio_config_adcin11 &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[1fb]"></a>m_gpio_config_ain_leak_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_config_ain_leak_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_gpio_config_ain_leak_disable &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_01()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battary_rtadc
</UL>

<P><STRONG><a name="[25e]"></a>m_gpio_config_ain_leak_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_config_ain_leak_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_gpio_config_ain_leak_enable &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_battary_rtadc
</UL>

<P><STRONG><a name="[1f9]"></a>m_gpio_config_alarm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_config_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_gpio_config_alarm &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_01()
</UL>

<P><STRONG><a name="[1f8]"></a>m_gpio_config_alarm_dect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_config_alarm_dect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_gpio_config_alarm_dect &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_01()
</UL>

<P><STRONG><a name="[18e]"></a>m_gpio_config_alarm_irq_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_gpio_config.o(i.m_gpio_config_alarm_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_alarm_process()
</UL>

<P><STRONG><a name="[18f]"></a>m_gpio_config_alarm_irq_re_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_gpio_config.o(i.m_gpio_config_alarm_irq_re_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_alarm_process()
</UL>

<P><STRONG><a name="[f6]"></a>m_gpio_config_flow_irq_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_gpio_config.o(i.m_gpio_config_flow_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_process()
</UL>

<P><STRONG><a name="[f8]"></a>m_gpio_config_flow_irq_re_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_gpio_config.o(i.m_gpio_config_flow_irq_re_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_process()
</UL>

<P><STRONG><a name="[1f6]"></a>m_gpio_config_flow_pin</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_config_flow_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_gpio_config_flow_pin &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_01()
</UL>

<P><STRONG><a name="[1f7]"></a>m_gpio_config_key0_irq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_config_key0_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_gpio_config_key0_irq &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_01()
</UL>

<P><STRONG><a name="[1c4]"></a>m_gpio_config_key0_irq_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_gpio_config.o(i.m_gpio_config_key0_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
</UL>

<P><STRONG><a name="[1cc]"></a>m_gpio_config_key0_irq_re_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_gpio_config.o(i.m_gpio_config_key0_irq_re_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
</UL>

<P><STRONG><a name="[7e]"></a>m_gpio_config_lcd</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, m_lcd_hal.o(i.m_gpio_config_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_gpio_config_lcd &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LCD_MspInit
</UL>

<P><STRONG><a name="[e3]"></a>m_gpio_config_shell_open</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_config_shell_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_gpio_config_shell_open &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[1fa]"></a>m_gpio_config_ste</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_config_ste))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_gpio_config_ste &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_01()
</UL>

<P><STRONG><a name="[164]"></a>m_gpio_config_ste_irq_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_gpio_config.o(i.m_gpio_config_ste_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_ste_process()
</UL>

<P><STRONG><a name="[165]"></a>m_gpio_config_ste_irq_re_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_gpio_config.o(i.m_gpio_config_ste_irq_re_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_ste_process()
</UL>

<P><STRONG><a name="[255]"></a>m_gpio_config_vavle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_config_vavle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_gpio_config_vavle &rArr; m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_for_start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_on
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_off
</UL>

<P><STRONG><a name="[1fc]"></a>m_gpio_exti2_3_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_exti2_3_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_gpio_exti2_3_enable &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_01()
</UL>

<P><STRONG><a name="[1fd]"></a>m_gpio_exti4_15_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_exti4_15_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_gpio_exti4_15_enable &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_01()
</UL>

<P><STRONG><a name="[1ea]"></a>m_gpio_into_lpw</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, m_gpio_config.o(i.m_gpio_into_lpw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_gpio_into_lpw &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pre_pre_stop_processing
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pre_pre_sleep_processing()
</UL>

<P><STRONG><a name="[274]"></a>m_gpio_set_mode</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, m_gpio_config.o(i.m_gpio_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_gpio_set_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_ste
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_key0_irq
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_flow_pin
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_alarm_dect
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_alarm
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_ain_leak_disable
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_ain_leak_enable
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_vavle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_shell_open
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_adcin11
</UL>

<P><STRONG><a name="[fc]"></a>m_gpio_write</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_gpio_config.o(i.m_gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_for_start
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_ain_leak_disable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_on
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_buzzer_off
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_on
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_off
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_ain_leak_enable
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_vavle
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_waite_ack
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_byte
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_received_byte
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pins_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_pins_deinit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_ack(signed char)
</UL>

<P><STRONG><a name="[22a]"></a>m_int_2_str_ex</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, m_string.o(i.m_int_2_str_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_int_2_str_ex &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_cpy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_math_pow
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process_release_ra(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1f1]"></a>m_lcd_all_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_lcd.o(i.m_lcd_all_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_lcd_all_off &rArr; m_lcd_refresh &rArr; HAL_LCD_UpdateDisplayRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_refresh
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
</UL>

<P><STRONG><a name="[1ee]"></a>m_lcd_all_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_lcd.o(i.m_lcd_all_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_lcd_all_on &rArr; m_lcd_refresh &rArr; HAL_LCD_UpdateDisplayRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_refresh
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
</UL>

<P><STRONG><a name="[275]"></a>m_lcd_disp_dig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, m_lcd.o(i.m_lcd_disp_dig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_lcd_disp_dig
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
</UL>

<P><STRONG><a name="[200]"></a>m_lcd_disp_dp</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, m_lcd.o(i.m_lcd_disp_dp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_lcd_disp_dp &rArr; m_lcd_disp_seg
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
</UL>

<P><STRONG><a name="[144]"></a>m_lcd_disp_seg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_lcd.o(i.m_lcd_disp_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_lcd_disp_seg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_dp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_comm_battery_segment()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_szrq_balance()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_comm_rssi_segment(unsigned char)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_seg_valve_status()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_szrq_ov_vol()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_current_vol()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_totale_vol()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_seg_shell_open()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_buy_gas_prompt()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_balance()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_price()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_pay_value()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_overage_v()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_overage_m()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ver()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_hms()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_qn()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_id()
</UL>

<P><STRONG><a name="[df]"></a>m_lcd_disp_str</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, m_lcd.o(i.m_lcd_disp_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_dig
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_device_ver
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_vavle_off()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_vavle_on()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_send()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_conn()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_rec()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_end()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_int32_to_float(int, unsigned char)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_off_reason()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_rssi()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_imei()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_dlcs()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ccid()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ver()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_hms()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_YMD()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_qn()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ir()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_id()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_off()
</UL>

<P><STRONG><a name="[1ed]"></a>m_lcd_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m_lcd.o(i.m_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_lcd_init &rArr; m_lcd_class_init() &rArr; HAL_LCD_Init &rArr; HAL_LCD_MspInit &rArr; m_gpio_config_lcd &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_class_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
</UL>

<P><STRONG><a name="[de]"></a>m_lcd_ram_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_lcd.o(i.m_lcd_ram_set))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_device_ver
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_all_on
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_all_off
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_vavle_off()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_vavle_on()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_send()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_conn()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_rec()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_end()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_szrq_balance()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_szrq_ov_vol()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_current_vol()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_totale_vol()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_balance()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_price()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_pay_value()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_overage_v()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_overage_m()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_rssi()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_imei()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_home()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_dlcs()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ccid()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ver()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_hms()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_YMD()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_qn()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ir()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_id()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_off()
</UL>

<P><STRONG><a name="[ca]"></a>m_lcd_refresh</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m_lcd.o(i.m_lcd_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_lcd_refresh &rArr; HAL_LCD_UpdateDisplayRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LCD_UpdateDisplayRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_all_on
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_all_off
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[102]"></a>m_lpusart1_deinit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m_uart.o(i.m_lpusart1_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = m_lpusart1_deinit &rArr; HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_udp_cereg_coap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pre_pre_stop_processing
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pre_pre_sleep_processing()
</UL>

<P><STRONG><a name="[b7]"></a>m_lpusart1_idle_time_hook</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_uart.o(i.m_lpusart1_idle_time_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_lpusart1_idle_time_hook &rArr; m_lpusart1_received_msg_post() &rArr; osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_msg_post()
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[241]"></a>m_lpusart1_idle_time_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_uart.o(i.m_lpusart1_idle_time_reset))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_irq_callback()
</UL>

<P><STRONG><a name="[103]"></a>m_lpusart1_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, m_uart.o(i.m_lpusart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_error_handler()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_start
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_udp_cereg_coap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[242]"></a>m_lpusart1_received_echo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_uart.o(i.m_lpusart1_received_echo))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_usart_se_received_irq_callback()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_irq_callback()
</UL>

<P><STRONG><a name="[276]"></a>m_lpusart1_received_start</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, m_uart.o(i.m_lpusart1_received_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_lpusart1_received_start &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_init
</UL>

<P><STRONG><a name="[22b]"></a>m_lpusart1_send_byte_poll</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_uart.o(i.m_lpusart1_send_byte_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_lpusart1_send_byte_poll &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process_release_ra(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[229]"></a>m_lpusart1_send_str</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_uart.o(i.m_lpusart1_send_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_lpusart1_send_str &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process_release_ra(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[163]"></a>m_math_pow</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m_string.o(i.m_math_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_math_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_int_2_str_ex
</UL>

<P><STRONG><a name="[146]"></a>m_mem_cpy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_string.o(i.m_mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_device_ver
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_rssi()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_imei()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ccid()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ver()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ir()
</UL>

<P><STRONG><a name="[10f]"></a>m_mem_cpy_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_string.o(i.m_mem_cpy_len))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_push
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_get_tail
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_read_from_media
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_vavle_off()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_vavle_on()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_send()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_conn()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_rec()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_end()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_rssi()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_imei()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ccid()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ver()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_id()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_register_frame
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_event_log
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_all_data_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_report_next_tm_recalc()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_fi_report()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_module_type()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_nuestatus()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_extract_nccid(unsigned char*, unsigned short, unsigned char*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_extract_cimi(unsigned char*, unsigned short, unsigned char*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_extract_cgsn(unsigned char*, unsigned short, unsigned char*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_uint32_2_bcd(unsigned char*, unsigned short, unsigned)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_msg_post()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_search_at_ts
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_vol_log_hour_start_end
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_gas_log(unsigned char)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_sysdata_save()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rw_fb_insert_retvalue(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_protoclo_ver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_module_type(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_encrypt(unsigned char*, unsigned short)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_random_code(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_sever_addr(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_decrypt(unsigned char*, unsigned short)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_device_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_app_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_nb_swver(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_mac(unsigned char*, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_cell_id(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_get_mac_key(unsigned char*, unsigned char*, unsigned short)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_iccid(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_imei(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_key(unsigned char*, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_apn(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[19d]"></a>m_mem_cpy_len_ex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_string.o(i.m_mem_cpy_len_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_mem_cpy_len_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_load_frame_mac(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[15c]"></a>m_mem_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m_string.o(i.m_mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_vavle_off()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_vavle_on()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_send()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_conn()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_rec()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ui_disp_menu_home_rf_end()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_rssi()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_imei()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ccid()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_hms()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_YMD()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_receive_buffer_clear
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_set(sysDataTime_t*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_start_to_end
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_new
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_hour_log(unsigned char*, unsigned short, unsigned)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_pop_get_day_log(unsigned char*, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[278]"></a>m_pre_pre_stop_processing</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m_pwr_mng.o(i.m_pre_pre_stop_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = m_pre_pre_stop_processing &rArr; m_lpusart1_deinit &rArr; HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_into_lpw
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_deinit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[279]"></a>m_rng_generation</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, m_rng.o(i.m_rng_generation))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_rng_generation &rArr; HAL_RNG_MspDeInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspDeInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
</UL>

<P><STRONG><a name="[27a]"></a>m_rng_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_rng.o(i.m_rng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_rng_init &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
</UL>

<P><STRONG><a name="[27b]"></a>m_rng_reinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_rng.o(i.m_rng_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_rng_reinit &rArr; HAL_RNG_MspDeInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
</UL>

<P><STRONG><a name="[cb]"></a>m_rtc_disable_wakeup</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m_rtc.o(i.m_rtc_disable_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_rtc_disable_wakeup &rArr; HAL_RTCEx_DeactivateWakeUpTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[cc]"></a>m_rtc_enable_wakeup</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_rtc.o(i.m_rtc_enable_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_rtc_enable_wakeup &rArr; HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[12b]"></a>m_rtc_get</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, m_rtc.o(i.m_rtc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_rtc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_push
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_process_sec()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_load_rtc(unsigned char*)
</UL>

<P><STRONG><a name="[1eb]"></a>m_rtc_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, m_rtc.o(i.m_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_rtc_init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_rtc_set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_error_handle()
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
</UL>

<P><STRONG><a name="[ef]"></a>m_soft_wdg_clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_rtc.o(i.m_soft_wdg_clr))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
</UL>

<P><STRONG><a name="[216]"></a>m_str_cmp_len</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, m_string.o(i.m_str_cmp_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_str_cmp_len
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hzrq_received_mac_verify(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[189]"></a>m_str_cpy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, m_string.o(i.m_str_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_off_reason()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_int_2_str_ex
</UL>

<P><STRONG><a name="[23c]"></a>m_str_h2b</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, m_string.o(i.m_str_h2b))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_str_h2b
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_udp_received_extract_coap(unsigned char*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[22c]"></a>m_str_match</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, m_string.o(i.m_str_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_str_match
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_fota_process
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_enter_psm
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process_release_ra(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[c4]"></a>m_str_match_ex</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, m_string.o(i.m_str_match_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_str_match_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_receive_buffer_clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_udp_received_extract_coap(unsigned char*, unsigned char*, unsigned short)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_nuestatus_cell()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_module_type()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_nuestatus()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_mver()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_snr()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_csq()
</UL>

<P><STRONG><a name="[ce]"></a>m_thread_create_event</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, m_event.o(i.m_thread_create_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_thread_create_event &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack(unsigned short, unsigned*) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[cf]"></a>m_thread_create_flow_puls</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, m_event.o(i.m_thread_create_flow_puls))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_thread_create_flow_puls &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack(unsigned short, unsigned*) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[cd]"></a>m_thread_create_nb_udp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nb_routines.o(i.m_thread_create_nb_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_thread_create_nb_udp &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack(unsigned short, unsigned*) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[1f3]"></a>m_thread_create_sysdata</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, data-protocol-ex.o(i.m_thread_create_sysdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_thread_create_sysdata &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack(unsigned short, unsigned*) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
</UL>

<P><STRONG><a name="[b8]"></a>m_usart1_se_idle_time_hook</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, m_uart.o(i.m_usart1_se_idle_time_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = m_usart1_se_idle_time_hook
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_usart1_se_received_msg_post()
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[243]"></a>m_usart1_se_idle_time_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_uart.o(i.m_usart1_se_idle_time_reset))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_usart_se_received_irq_callback()
</UL>

<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; m_thread_create_main() &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack(unsigned short, unsigned*) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_set_system_clock_msi
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_set_system_clock_hsi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_main()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[90]"></a>mcu_error_reset</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, m_pwr_mng.o(i.mcu_error_reset))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_error_handler()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_error_handle()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_clock_config_error_handler()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_adc_error_handler()
</UL>

<P><STRONG><a name="[11b]"></a>my_scanf_int16</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, m_string.o(i.my_scanf_int16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_scanf_int16
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_receive_buffer_clear
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_report_next_tm_recalc()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_fi_report()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_udp_received_extract_coap(unsigned char*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[113]"></a>nb_coap_enter_psm</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, m-nb-module.o(i.nb_coap_enter_psm))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nb_coap_enter_psm &rArr; nb_module_cfun_off &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_cfun_off
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_fota_process
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_process_disable_sleep_in_lwp()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[112]"></a>nb_coap_psm_release_ra</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, m-nb-module.o(i.nb_coap_psm_release_ra))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nb_coap_psm_release_ra &rArr; nb_send_process_release_ra(unsigned char*, unsigned short) &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process_release_ra(unsigned char*, unsigned short)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[107]"></a>nb_coap_psm_send_ready</STRONG> (Thumb, 1814 bytes, Stack size 40 bytes, m-nb-module.o(i.nb_coap_psm_send_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nb_coap_psm_send_ready &rArr; nb_get_nuestatus_cell() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_cpy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_cfun_off
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_deinit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_process_disable_sleep_in_lwp()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match_ex
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_reselect_enable()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_clear_freq_point()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_close_erda()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_nuestatus_cell()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_module_type()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_enable()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_nuestatus()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_extract_nccid(unsigned char*, unsigned short, unsigned char*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_extract_cimi(unsigned char*, unsigned short, unsigned char*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_extract_cgsn(unsigned char*, unsigned short, unsigned char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_mver()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_snr()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_csq()
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[10d]"></a>nb_fota_process</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, m-nb-module.o(i.nb_fota_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nb_fota_process &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_enter_psm
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[104]"></a>nb_module_cfun_off</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, m-nb-module.o(i.nb_module_cfun_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nb_module_cfun_off &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_enter_psm
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[10a]"></a>nb_module_receive_buffer_clear</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, m-nb-module.o(i.nb_module_receive_buffer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nb_module_receive_buffer_clear &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_scanf_int16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match_ex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[10c]"></a>nb_received_process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m-nb-module.o(i.nb_received_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nb_received_process &rArr; nb_udp_received_coap_nnmi1() &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_udp_received_coap_nnmi1()
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[10b]"></a>nb_send_process</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, m-nb-module.o(i.nb_send_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nb_send_process &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_process_disable_sleep_in_lwp()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_str_match
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_send_str
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_send_byte_poll
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_int_2_str_ex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[109]"></a>nb_udp_cereg_coap</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, m-nb-module.o(i.nb_udp_cereg_coap))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nb_udp_cereg_coap &rArr; nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned) &rArr; m_lpusart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_deinit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[10e]"></a>np_received_extract_process</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, m-nb-module.o(i.np_received_extract_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = np_received_extract_process &rArr; np_udp_received_extract_coap(unsigned char*, unsigned char*, unsigned short) &rArr; my_scanf_int16
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_udp_received_extract_coap(unsigned char*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[d4]"></a>osDelay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_for_start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_on
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_off
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_udp_cereg_coap
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_receive_buffer_clear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_cfun_off
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_enter_psm
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_internal_vref_rtadc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_start_waite_power_up
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_off_msg_send()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_on_msg_send()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_alarm_process()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_ste_process()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_beap_ms(unsigned short)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_send_str
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_send_byte_poll
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process_release_ra(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[e8]"></a>osKernelSysTick</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelSysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_receive_buffer_clear
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_fota_process
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_enter_psm
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_process_sec()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_udp_received_coap_nnmi1()
</UL>

<P><STRONG><a name="[27c]"></a>osMessageCreate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_sysdata
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_nb_udp
</UL>

<P><STRONG><a name="[100]"></a>osMessageGet</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, cmsis_os.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vThreadDataSave(void*)
</UL>

<P><STRONG><a name="[149]"></a>osMessagePut</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, cmsis_os.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessagePut &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue(QueueDefinition*, const void*, long) &rArr; xTaskPriorityDisinherit &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_start_rf(__m_udpSendmsg_t*)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vThreadDataSave(void*)
</UL>

<P><STRONG><a name="[21e]"></a>osMutexCreate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue(QueueDefinition*, const void*, long) &rArr; xTaskPriorityDisinherit &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_mutex_create
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_ex_eeprom_mutex_create()
</UL>

<P><STRONG><a name="[119]"></a>osMutexRelease</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue(QueueDefinition*, const void*, long) &rArr; xTaskPriorityDisinherit &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_fi_report()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_sysdata_save()
</UL>

<P><STRONG><a name="[118]"></a>osMutexWait</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cmsis_os.o(i.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_fi_report()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_sysdata_save()
</UL>

<P><STRONG><a name="[91]"></a>osSignalSet</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cmsis_os.o(i.osSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osSignalSet &rArr; xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_hight_flow_protect(unsigned)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_off_msg_send()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_on_msg_send()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_ulock_fi()
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadFlowPuls(void*)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_exti4_15_irqhandler()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_exti2_3_irqhandler()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_err_callback()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_received_msg_post()
</UL>

<P><STRONG><a name="[d0]"></a>osSignalWait</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, cmsis_os.o(i.osSignalWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osSignalWait &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList(unsigned) &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadFlowPuls(void*)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadEvent(void*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_at_cmd(unsigned char*, unsigned char*, unsigned char*, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[b9]"></a>osSystickHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler() &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1a7]"></a>osThreadCreate</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack(unsigned short, unsigned*) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority(osPriority)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_sysdata
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_nb_udp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_flow_puls
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_event
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_thread_create_main()
</UL>

<P><STRONG><a name="[254]"></a>osThreadGetId</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cmsis_os.o(i.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_sysdata_save
</UL>

<P><STRONG><a name="[1f0]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, m_pwr_mng.o(i.prvSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvSetupTimerInterrupt &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1d6]"></a>pvPortMalloc</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList(A_BLOCK_LINK*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack(unsigned short, unsigned*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[2a9]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2ab]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[202]"></a>qc_data_clear_sysdata_to_dcls_b</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, 15e-data-protocol.o(i.qc_data_clear_sysdata_to_dcls_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = qc_data_clear_sysdata_to_dcls_b
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_realtime_data_clear
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_device_even_lock_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_valve_ctrl()
</UL>

<P><STRONG><a name="[295]"></a>qc_data_device_even_lock_clear</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, 15e-data-protocol.o(i.qc_data_device_even_lock_clear))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_clear_sysdata_to_dcls_b
</UL>

<P><STRONG><a name="[1f2]"></a>qc_data_mutex_create</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data.o(i.qc_data_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = qc_data_mutex_create &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue(QueueDefinition*, const void*, long) &rArr; xTaskPriorityDisinherit &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
</UL>

<P><STRONG><a name="[17c]"></a>qc_data_read_from_media</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, data.o(i.qc_data_read_from_media))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qc_data_read_from_media
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_push
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_item_get_unread_num
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_get_tail
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_delete_tail
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_sysdata_save()
</UL>

<P><STRONG><a name="[294]"></a>qc_data_realtime_data_clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, 15e-data-protocol.o(i.qc_data_realtime_data_clear))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_clear_sysdata_to_dcls_b
</UL>

<P><STRONG><a name="[1f4]"></a>qc_data_sysdata_init</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, data.o(i.qc_data_sysdata_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = qc_data_sysdata_init &rArr; m_rng_init &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rng_reinit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rng_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rng_generation
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_write_to_media
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_read_from_media
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_star_thread_main_00()
</UL>

<P><STRONG><a name="[17b]"></a>qc_data_write_to_media</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, data.o(i.qc_data_write_to_media))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = qc_data_write_to_media &rArr; m_flash_write_eeprom &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write_eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_push
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_format
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_delete_tail
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_sysdata_save()
</UL>

<P><STRONG><a name="[1a1]"></a>record_api_save_day_log</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hzrq-data-record.o(i.record_api_save_day_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = record_api_save_day_log &rArr; record_save_gas_log(unsigned char) &rArr; ex_data_write_record &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_gas_log(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_change_day()
</UL>

<P><STRONG><a name="[1ae]"></a>record_api_save_hour_log</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hzrq-data-record.o(i.record_api_save_hour_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = record_api_save_hour_log &rArr; record_save_gas_log(unsigned char) &rArr; ex_data_write_record &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_gas_log(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_change_hour()
</UL>

<P><STRONG><a name="[218]"></a>record_read_eventlog_new</STRONG> (Thumb, 236 bytes, Stack size 96 bytes, hzrq-data-record.o(i.record_read_eventlog_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = record_read_eventlog_new &rArr; record_read_eventlog_init() &rArr; ex_eeprom_init_part_desc_eventlog() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_event_log_format
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_eventlog()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_init()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log_new(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1b5]"></a>record_read_eventlog_start_to_end</STRONG> (Thumb, 274 bytes, Stack size 96 bytes, hzrq-data-record.o(i.record_read_eventlog_start_to_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = record_read_eventlog_start_to_end &rArr; record_read_eventlog_init() &rArr; ex_eeprom_init_part_desc_eventlog() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_set
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_event_log_format
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_eventlog()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_eventlog_init()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_event_log(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1e0]"></a>record_read_vol_log_day_start_end</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, hzrq-data-record.o(i.record_read_vol_log_day_start_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = record_read_vol_log_day_start_end &rArr; record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned) &rArr; record_search_at_ts &rArr; ex_data_get_part_inf &rArr; ex_eeprom_read &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_day(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[207]"></a>record_read_vol_log_hour_start_end</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, hzrq-data-record.o(i.record_read_vol_log_hour_start_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = record_read_vol_log_hour_start_end &rArr; record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned) &rArr; record_search_at_ts &rArr; ex_data_get_part_inf &rArr; ex_eeprom_read &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rd_vol_log_hour(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[233]"></a>record_save_event_log</STRONG> (Thumb, 294 bytes, Stack size 80 bytes, hzrq-data-record.o(i.record_save_event_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = record_save_event_log &rArr; ex_eeprom_init_part_desc_eventlog() &rArr; ex_eeprom_write &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dt_to_time_stamp
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_init_part_desc_eventlog()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[20f]"></a>record_search_at_ts</STRONG> (Thumb, 546 bytes, Stack size 96 bytes, hzrq-data-record.o(i.record_search_at_ts))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = record_search_at_ts &rArr; ex_data_get_part_inf &rArr; ex_eeprom_read &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_eeprom_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_data_get_part_inf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_read_start_to_end(unsigned char, unsigned char*, unsigned short, unsigned, unsigned)
</UL>

<P><STRONG><a name="[111]"></a>rf_send_fifo_delete_tail</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, data.o(i.rf_send_fifo_delete_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rf_send_fifo_delete_tail &rArr; qc_data_write_to_media &rArr; m_flash_write_eeprom &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_write_to_media
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_read_from_media
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[298]"></a>rf_send_fifo_format</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, data.o(i.rf_send_fifo_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rf_send_fifo_format &rArr; qc_data_write_to_media &rArr; m_flash_write_eeprom &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_write_to_media
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_get_tail
</UL>

<P><STRONG><a name="[14e]"></a>rf_send_fifo_get_tail</STRONG> (Thumb, 132 bytes, Stack size 288 bytes, data.o(i.rf_send_fifo_get_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rf_send_fifo_get_tail &rArr; rf_send_fifo_format &rArr; qc_data_write_to_media &rArr; m_flash_write_eeprom &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_format
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_read_from_media
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_register(unsigned char*, unsigned short, unsigned char*, unsigned short, unsigned char)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_exe_pop(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[297]"></a>rf_send_fifo_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, data.o(i.rf_send_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rf_send_fifo_init &rArr; crc_verify &rArr; crc_sum &rArr; calc_crc_w(unsigned short, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_write_to_media
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_read_from_media
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_push
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_item_get_unread_num
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
</UL>

<P><STRONG><a name="[106]"></a>rf_send_fifo_item_get_unread_num</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, data.o(i.rf_send_fifo_item_get_unread_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rf_send_fifo_item_get_unread_num &rArr; rf_send_fifo_init &rArr; crc_verify &rArr; crc_sum &rArr; calc_crc_w(unsigned short, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_read_from_media
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
</UL>

<P><STRONG><a name="[234]"></a>rf_send_fifo_push</STRONG> (Thumb, 202 bytes, Stack size 296 bytes, data.o(i.rf_send_fifo_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rf_send_fifo_push &rArr; rf_send_fifo_init &rArr; crc_verify &rArr; crc_sum &rArr; calc_crc_w(unsigned short, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_dt_to_time_stamp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rtc_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy_len
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_verify
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_append
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_write_to_media
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_read_from_media
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[11a]"></a>system_dt_to_time_stamp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, time-stamp.o(i.system_dt_to_time_stamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = system_dt_to_time_stamp &rArr; __YYMMDD_to_int32day(unsigned short, unsigned char, unsigned char) &rArr; is_leap_year &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dt_format_bcd_to_hex(sysDataTime_t*)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hhmmss_to_int32sec(unsigned char, unsigned char, unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__YYMMDD_to_int32day(unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_rtc_set
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_send_fifo_push
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_event_log
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_load_pop_frame
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_report_next_tm_recalc()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_fi_report()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_save_gas_log(unsigned char)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_download_rtc(unsigned char*)
</UL>

<P><STRONG><a name="[250]"></a>time_stamp_to_system_dt</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, time-stamp.o(i.time_stamp_to_system_dt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = time_stamp_to_system_dt &rArr; __int32day_to_YYMMDD &rArr; is_leap_year &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__int32day_to_YYMMDD
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dt_format_hex_to_bcd(sysDataTime_t*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__int32sec_to_hhmmss(unsigned, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hzrq_event_log_format
</UL>

<P><STRONG><a name="[c9]"></a>ui_disp_device_ver</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ui.o(i.ui_disp_device_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ui_disp_device_ver &rArr; m_lcd_disp_str &rArr; m_lcd_disp_dig
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mem_cpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_ram_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_str
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[d2]"></a>ui_disp_menu</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, ui.o(i.ui_disp_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ui_disp_menu &rArr; ui_disp_menu_home() &rArr; __ui_disp_menu_home_main() &rArr; ui_disp_overage_m() &rArr; __ui_disp_int32_to_float(int, unsigned char) &rArr; __int32_2_mflot32(int, uiFloat32_t*, unsigned short, unsigned short) &rArr; m_math_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_refresh
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lcd_disp_seg
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_comm_battery_segment()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_szrq_balance()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_comm_rssi_segment(unsigned char)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_seg_valve_status()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_szrq_ov_vol()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_current_vol()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_totale_vol()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_seg_shell_open()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_buy_gas_prompt()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_balance()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_price()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_rssi()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_imei()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_home()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_dlcs()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ccid()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ver()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_hms()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_YMD()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_qn()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_ir()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_disp_menu_id()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_process
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_received_process
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_coap_psm_send_ready
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadCoapPsm(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_key_down_process()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_rtc_process_sec()
</UL>

<P><STRONG><a name="[240]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[da]"></a>vAssertCalled</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, port.o(i.vAssertCalled))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask(void*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1d8]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[21d]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables(tskTaskControlBlock*, const char*, unsigned long, const xMEMORY_REGION*, unsigned short)
</UL>

<P><STRONG><a name="[23f]"></a>vListInsert</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList(unsigned)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[2a2]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[58]"></a>vPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUSART1_IRQHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty(const QueueDefinition*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue(QueueDefinition*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull(const QueueDefinition*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_5_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[5b]"></a>vPortExitCritical</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUSART1_IRQHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty(const QueueDefinition*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue(QueueDefinition*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull(const QueueDefinition*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_5_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[fe]"></a>vPortFree</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList(A_BLOCK_LINK*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack(unsigned short, unsigned*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB(tskTaskControlBlock*)
</UL>

<P><STRONG><a name="[db]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, m_pwr_mng.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; m_pre_pre_stop_processing &rArr; m_lpusart1_deinit &rArr; HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSleepProcessing
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pre_pre_stop_processing
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pre_pre_sleep_processing()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask(void*)
</UL>

<P><STRONG><a name="[d7]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask(void*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[27f]"></a>vTaskDelay</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList(unsigned)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[125]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue(QueueDefinition*)
</UL>

<P><STRONG><a name="[2a1]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList(unsigned)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2a3]"></a>vTaskPriorityInherit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2a4]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSetTimeOutState &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[27e]"></a>vTaskStartScheduler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack(unsigned short, unsigned*) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29f]"></a>vTaskStepTick</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskStepTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[d9]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination()
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask(void*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[42]"></a>vTaskSwitchContext</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook(void*, char*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[c7]"></a>vavle_off_for_start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, valve_api.o(i.vavle_off_for_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vavle_off_for_start &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_write
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_gpio_config_vavle
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTheadMain(void*)
</UL>

<P><STRONG><a name="[166]"></a>vavle_off_from_app</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, m_event.o(i.vavle_off_from_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = vavle_off_from_app &rArr; vavle_off_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_off_from_app_hook()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_off_msg_send()
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_calc_all
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_hight_flow_protect(unsigned)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_no_flow_protect()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_check_batteray()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_no_network_process()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_valve_ctrl()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_alarm_process()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_ste_process()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzrq_ins_rw_valve_sta(unsigned char*, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[19f]"></a>vavle_on_from_app</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m_event.o(i.vavle_on_from_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = vavle_on_from_app &rArr; vavle_on_from_app_hook() &rArr; even_send_msg_to_rf_send_pop(unsigned char, unsigned short, unsigned char) &rArr; hzrq_load_pop_frame &rArr; _hzrq_load_frame_encrypt(unsigned char*, unsigned short) &rArr; __hzrq_get_encrypt_key(unsigned char*, unsigned char*, unsigned short) &rArr; hmac_sha256 &rArr; SHA256_Final &rArr; SHA256_Bytes &rArr; SHA256_Block(SHA256_State*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vavle_on_from_app_hook()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_valve_on_msg_send()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_valve_ctrl()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;even_key_down_super_pay()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process_unlock()
</UL>

<P><STRONG><a name="[2a5]"></a>xPortStartScheduler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortStartScheduler &rArr; prvSetupTimerInterrupt &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[288]"></a>xQueueCreateMutex</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue(QueueDefinition*, const void*, long) &rArr; xTaskPriorityDisinherit &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[283]"></a>xQueueGenericCreate</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[285]"></a>xQueueGenericReceive</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue(QueueDefinition*, void*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty(const QueueDefinition*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue(QueueDefinition*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[2a8]"></a>xQueueGenericReset</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[287]"></a>xQueueGenericSend</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue(QueueDefinition*, const void*, long) &rArr; xTaskPriorityDisinherit &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue(QueueDefinition*, const void*, long)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue(QueueDefinition*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull(const QueueDefinition*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[286]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue(QueueDefinition*, const void*, long) &rArr; xTaskPriorityDisinherit &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue(QueueDefinition*, const void*, long)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[289]"></a>xQueueGiveFromISR</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[284]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue(QueueDefinition*, void*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[2aa]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskSetTimeOutState &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[28f]"></a>xTaskGenericCreate</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack(unsigned short, unsigned*) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables(tskTaskControlBlock*, const char*, unsigned long, const xMEMORY_REGION*, unsigned short)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack(unsigned short, unsigned*)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[28b]"></a>xTaskGenericNotify</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskGenericNotify &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[290]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[28d]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[282]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[281]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[198]"></a>xTaskIncrementTick</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler()
</UL>

<P><STRONG><a name="[28a]"></a>xTaskNotifyFromISR</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, tasks.o(i.xTaskNotifyFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskNotifyFromISR &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[28c]"></a>xTaskNotifyWait</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tasks.o(i.xTaskNotifyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList(unsigned) &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList(unsigned)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>

<P><STRONG><a name="[187]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskPriorityDisinherit &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue(QueueDefinition*, const void*, long)
</UL>

<P><STRONG><a name="[124]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskRemoveFromEventList &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue(QueueDefinition*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[dc]"></a>xTaskResumeAll</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination()
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask(void*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qc_data_sysdata_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flow_calc_mm()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hal_cal_overage_v_for_m()
</UL>

<P><STRONG><a name="[2eb]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[280]"></a>inHandlerMode()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os.o(i._Z13inHandlerModev))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[28e]"></a>makeFreeRtosPriority(osPriority)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i._Z20makeFreeRtosPriority10osPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[122]"></a>prvIsQueueFull(const QueueDefinition*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i._Z14prvIsQueueFullPK15QueueDefinition))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull(const QueueDefinition*) &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[123]"></a>prvUnlockQueue(QueueDefinition*)</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, queue.o(i._Z14prvUnlockQueueP15QueueDefinition))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue(QueueDefinition*) &rArr; xTaskRemoveFromEventList &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[142]"></a>prvIsQueueEmpty(const QueueDefinition*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(i._Z15prvIsQueueEmptyPK15QueueDefinition))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty(const QueueDefinition*) &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[186]"></a>prvCopyDataToQueue(QueueDefinition*, const void*, long)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, queue.o(i._Z18prvCopyDataToQueueP15QueueDefinitionPKvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvCopyDataToQueue(QueueDefinition*, const void*, long) &rArr; xTaskPriorityDisinherit &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1a8]"></a>prvCopyDataFromQueue(QueueDefinition*, void*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(i._Z20prvCopyDataFromQueueP15QueueDefinitionPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataFromQueue(QueueDefinition*, void*) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2d]"></a>prvIdleTask(void*)</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, tasks.o(i._Z11prvIdleTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvIdleTask(void*) &rArr; prvCheckTasksWaitingTermination() &rArr; prvDeleteTCB(tskTaskControlBlock*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[fd]"></a>prvDeleteTCB(tskTaskControlBlock*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i._Z12prvDeleteTCBP19tskTaskControlBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvDeleteTCB(tskTaskControlBlock*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination()
</UL>

<P><STRONG><a name="[1d5]"></a>prvAllocateTCBAndStack(unsigned short, unsigned*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(i._Z22prvAllocateTCBAndStacktPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvAllocateTCBAndStack(unsigned short, unsigned*) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[d8]"></a>prvGetExpectedIdleTime()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tasks.o(i._Z22prvGetExpectedIdleTimev))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask(void*)
</UL>

<P><STRONG><a name="[1d7]"></a>prvInitialiseTaskLists()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i._Z22prvInitialiseTaskListsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[21c]"></a>prvInitialiseTCBVariables(tskTaskControlBlock*, const char*, unsigned long, const xMEMORY_REGION*, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tasks.o(i._Z25prvInitialiseTCBVariablesP19tskTaskControlBlockPKcmPK14xMEMORY_REGIONt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvInitialiseTCBVariables(tskTaskControlBlock*, const char*, unsigned long, const xMEMORY_REGION*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[2ac]"></a>prvResetNextTaskUnblockTime()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i._Z27prvResetNextTaskUnblockTimev))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[23e]"></a>prvAddCurrentTaskToDelayedList(unsigned)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(i._Z30prvAddCurrentTaskToDelayedListj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList(unsigned) &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[d6]"></a>prvCheckTasksWaitingTermination()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i._Z31prvCheckTasksWaitingTerminationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckTasksWaitingTermination() &rArr; prvDeleteTCB(tskTaskControlBlock*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB(tskTaskControlBlock*)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask(void*)
</UL>

<P><STRONG><a name="[2c]"></a>prvTaskExitError()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i._Z16prvTaskExitErrorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTaskExitError() &rArr; vAssertCalled &rArr; vPortExitCritical &rArr;  vAssertCalled (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[291]"></a>prvHeapInit()</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, heap_4.o(i._Z11prvHeapInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[292]"></a>prvInsertBlockIntoFreeList(A_BLOCK_LINK*)</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i._Z26prvInsertBlockIntoFreeListP12A_BLOCK_LINK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList(A_BLOCK_LINK*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[71]"></a>ADC_Enable(ADC_HandleTypeDef*)</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i._Z10ADC_EnableP17ADC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Enable(ADC_HandleTypeDef*) &rArr; ADC_DelayMicroSecond(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond(unsigned)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[74]"></a>ADC_Disable(ADC_HandleTypeDef*)</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i._Z11ADC_DisableP17ADC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Disable(ADC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>

<P><STRONG><a name="[73]"></a>ADC_ConversionStop(ADC_HandleTypeDef*)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i._Z18ADC_ConversionStopP17ADC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop(ADC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>

<P><STRONG><a name="[bf]"></a>ADC_DelayMicroSecond(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i._Z20ADC_DelayMicroSecondj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DelayMicroSecond(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable(ADC_HandleTypeDef*)
</UL>

<P><STRONG><a name="[80]"></a>NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i._Z16NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[67]"></a>FLASH_SetErrorCode()</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i._Z18FLASH_SetErrorCodev))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[195]"></a>usart_error_handler()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_uart.o(i._Z19usart_error_handlerv))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_error_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lpusart1_init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[56]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
